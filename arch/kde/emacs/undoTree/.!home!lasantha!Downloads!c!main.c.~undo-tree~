(undo-tree-save-format-version . 1)
"d4b7e9ade83ac03876e16ca47c95efe1920523be"
[nil nil nil nil (26264 57767 239525 973000) 0 nil]
([nil nil ((551 . 556) (549 . 551) (t 26225 24975 944582 382000) 493) nil (26264 57767 239524 69000) 0 nil])
([nil nil ((#("
	" 0 1 (c-in-sws t face font-lock-comment-face ws-butler-chg chg fontified t) 1 2 (c-is-sws t ws-butler-chg chg fontified nil)) . 549) (undo-tree-id210 . -2) (undo-tree-id211 . -2) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (#("print" 0 1 (c-is-sws t ws-butler-chg chg fontified t) 1 2 (ws-butler-chg chg fontified t) 2 3 (ws-butler-chg chg fontified t) 3 4 (ws-butler-chg chg fontified t) 4 5 (ws-butler-chg chg fontified t)) . 551) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4)) nil (26264 57767 239521 605000) 0 nil])
([nil nil ((nil rear-nonsticky nil 594 . 595) (nil fontified nil 552 . 595) (nil fontified nil 551 . 552) (551 . 595) 550 (t 26225 24975 944582 382000)) nil (26264 57767 239493 802000) 0 nil])
([nil nil ((#(";;
;;
;;
;;
;;
;;
;;
;;
;;
;;
;;
;;
;;
;;
;;" 0 1 (fontified nil ws-butler-chg chg c-is-sws t) 1 43 (fontified nil ws-butler-chg chg) 43 44 (rear-nonsticky nil fontified nil ws-butler-chg chg)) . 551) (undo-tree-id172 . -43) (undo-tree-id173 . -43) (undo-tree-id174 . -43) (undo-tree-id175 . -43) (undo-tree-id176 . -43) (undo-tree-id177 . -43) (undo-tree-id178 . -43) (undo-tree-id179 . -43) (undo-tree-id180 . -43) (undo-tree-id181 . -43) (undo-tree-id182 . -43) (undo-tree-id183 . -43) (undo-tree-id184 . -43) (undo-tree-id185 . -43) (undo-tree-id186 . -43) (undo-tree-id187 . -43) (undo-tree-id188 . -43) (undo-tree-id189 . -43) (undo-tree-id190 . -43) (undo-tree-id191 . -43) (undo-tree-id192 . -43) (undo-tree-id193 . -43) (undo-tree-id194 . -43) (undo-tree-id195 . -43) (undo-tree-id196 . -43) (undo-tree-id197 . -43) (undo-tree-id198 . -43) (undo-tree-id199 . -43) (undo-tree-id200 . -42) (undo-tree-id201 . -43) (undo-tree-id202 . -43) (undo-tree-id203 . -43) (undo-tree-id204 . -43) (undo-tree-id205 . -43) (undo-tree-id206 . -43) (undo-tree-id207 . -43) (undo-tree-id208 . -43) (undo-tree-id209 . -43) (nil rear-nonsticky t 594 . 595)) nil (26264 57767 239489 284000) 0 nil])
([nil nil ((553 . 554) (551 . 551) (551 . 553) (549 . 551) (t 26225 24975 944582 382000) 493) nil (26264 57767 239453 827000) 0 nil])
([nil nil ((#("
	" 0 1 (c-in-sws t face font-lock-comment-face ws-butler-chg chg fontified t) 1 2 (c-is-sws t ws-butler-chg chg fontified nil)) . 549) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (#("re" 0 1 (c-is-sws t ws-butler-chg chg fontified nil) 1 2 (ws-butler-chg chg fontified nil)) . 551) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (#("t" 0 1 (ws-butler-chg chg fontified t)) . 553)) nil (26264 57767 239448 707000) 0 nil])
([nil nil ((#("#include <stdio.h>
#include <stdlib.h>

struct student {
      char name[50];
      int age;
      struct student *next;
};

struct student *createStudent(char studentName[], int studentAge);

// Write other function prototypes here (if any)

int main(void) {
    struct student *studptr;
    int myAge;
    char myName[50];
    scanf(\"%s %d\", myName, &myAge);
    studptr = createStudent(myName, myAge);
    printf(\"New student created: %s is %d years old.\\n\", studptr->name, studptr->age);
    free(studptr); // Freeing memory allocated by malloc
    return 0;
}

// Write your createStudent function here (and any other functions you see fit)
struct student *createStudent(char studentName[], int studentAge)
{
	struct student * ptr;
	ptr = (struct student *) malloc(sizeof(struct student)); // Casting malloc to the correct type

	int i;
	for(i=0; i < 50; i++)
	{
		ptr->name[i] = studentName[i];
	}

	ptr-> age = studentAge;
	ptr->next = NULL;
	return ptr;
};
" 0 1 (c-in-sws t face font-lock-preprocessor-face c-is-sws t fontified t) 1 8 (c-in-sws t face font-lock-preprocessor-face fontified t) 8 9 (c-in-sws t fontified t) 9 10 (c-in-sws t category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 10 17 (c-in-sws t face font-lock-string-face fontified t) 17 18 (c-in-sws t category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 18 19 (c-in-sws t fontified t) 19 20 (c-in-sws t face font-lock-preprocessor-face c-is-sws t fontified t) 20 27 (c-in-sws t face font-lock-preprocessor-face fontified t) 27 28 (c-in-sws t fontified t) 28 29 (c-in-sws t category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 29 37 (c-in-sws t face font-lock-string-face fontified t) 37 38 (c-in-sws t category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 38 39 (c-in-sws t fontified t) 39 40 (c-is-sws t fontified t) 40 41 (face font-lock-keyword-face c-is-sws t fontified t) 41 46 (face font-lock-keyword-face fontified t) 46 47 (fontified t) 47 54 (face font-lock-type-face fontified t) 54 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-1-face) fontified t) 56 63 (fontified t) 63 66 (face font-lock-type-face fontified t) 66 67 (face font-lock-type-face c-type c-decl-id-start fontified t) 67 68 (fontified t) 68 72 (face font-lock-variable-name-face fontified t) 72 73 (face (rainbow-delimiters-depth-2-face) fontified t) 73 75 (fontified t) 75 76 (face (rainbow-delimiters-depth-2-face) fontified t) 76 84 (fontified t) 84 86 (face font-lock-type-face fontified t) 86 87 (face font-lock-type-face c-type c-decl-id-start fontified t) 87 88 (fontified t) 88 91 (face font-lock-variable-name-face fontified t) 91 99 (fontified t) 99 105 (face font-lock-keyword-face fontified t) 105 106 (fontified t) 106 112 (face font-lock-type-face fontified t) 112 113 (face font-lock-type-face c-type c-decl-id-start fontified t) 113 115 (fontified t) 115 119 (face font-lock-variable-name-face fontified t) 119 121 (fontified t) 121 122 (face (rainbow-delimiters-depth-1-face) c-type c-decl-id-start fontified t) 122 125 (fontified t) 125 131 (face font-lock-keyword-face fontified t) 131 132 (fontified t) 132 138 (face font-lock-type-face fontified t) 138 139 (face font-lock-type-face c-type c-decl-id-start fontified t) 139 141 (fontified t) 141 154 (face font-lock-function-name-face fontified t) 154 155 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 155 159 (face font-lock-type-face fontified t) 159 160 (fontified t) 160 171 (face font-lock-variable-name-face fontified t) 171 172 (face (rainbow-delimiters-depth-2-face) fontified t) 172 173 (face (rainbow-delimiters-depth-2-face) fontified t) 173 174 (c-type c-decl-arg-start fontified t) 174 175 (fontified t) 175 178 (face font-lock-type-face fontified t) 178 179 (fontified t) 179 189 (face font-lock-variable-name-face fontified t) 189 190 (face (rainbow-delimiters-depth-1-face) fontified t) 190 193 (fontified t) 193 194 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 194 196 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 196 242 (c-in-sws t face font-lock-comment-face fontified t) 242 243 (c-in-sws t fontified t) 243 244 (face font-lock-type-face c-is-sws t fontified t) 244 245 (face font-lock-type-face fontified t) 245 246 (face font-lock-type-face c-type c-decl-id-start fontified t) 246 247 (fontified t) 247 251 (face font-lock-function-name-face fontified t) 251 252 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 252 256 (face font-lock-type-face fontified t) 256 257 (face (rainbow-delimiters-depth-1-face) fontified t) 257 258 (fontified t) 258 259 (face (rainbow-delimiters-depth-1-face) fontified t) 259 264 (fontified t) 264 270 (face font-lock-keyword-face fontified t) 270 271 (fontified t) 271 277 (face font-lock-type-face fontified t) 277 278 (face font-lock-type-face c-type c-decl-id-start fontified t) 278 280 (fontified t) 280 287 (face font-lock-variable-name-face fontified t) 287 293 (fontified t) 293 295 (face font-lock-type-face fontified t) 295 296 (face font-lock-type-face c-type c-decl-id-start fontified t) 296 297 (fontified t) 297 302 (face font-lock-variable-name-face fontified t) 302 308 (fontified t) 308 311 (face font-lock-type-face fontified t) 311 312 (face font-lock-type-face c-type c-decl-id-start fontified t) 312 313 (fontified t) 313 319 (face font-lock-variable-name-face fontified t) 319 320 (face (rainbow-delimiters-depth-2-face) fontified t) 320 322 (fontified t) 322 323 (face (rainbow-delimiters-depth-2-face) fontified t) 323 334 (fontified t) 334 335 (face (rainbow-delimiters-depth-2-face) fontified t) 335 342 (face font-lock-string-face fontified t) 342 358 (fontified t) 358 359 (face (rainbow-delimiters-depth-2-face) fontified t) 359 388 (fontified t) 388 389 (face (rainbow-delimiters-depth-2-face) fontified t) 389 402 (fontified t) 402 403 (face (rainbow-delimiters-depth-2-face) fontified t) 403 415 (fontified t) 415 416 (face (rainbow-delimiters-depth-2-face) fontified t) 416 460 (face font-lock-string-face fontified t) 460 489 (fontified t) 489 490 (face (rainbow-delimiters-depth-2-face) fontified t) 490 492 (fontified t) 492 500 (fontified t) 500 501 (face (rainbow-delimiters-depth-2-face) fontified t) 501 508 (fontified t) 508 509 (face (rainbow-delimiters-depth-2-face) fontified t) 509 510 (fontified t) 510 511 (c-is-sws t c-in-sws t fontified t) 511 512 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 512 514 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 514 548 (face font-lock-comment-face c-in-sws t fontified t) 548 549 (face font-lock-comment-face fontified t) 549 550 (fontified t c-is-sws t) 550 553 (fontified t c-is-sws t) 553 554 (face font-lock-keyword-face fontified t c-is-sws t) 554 559 (face font-lock-keyword-face fontified t) 559 562 (fontified t) 562 563 (fontified t) 563 564 (face (rainbow-delimiters-depth-1-face) fontified t) 564 566 (fontified t) 566 567 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 567 569 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 569 646 (face font-lock-comment-face fontified t c-in-sws t) 646 647 (face font-lock-keyword-face fontified t c-is-sws t) 647 652 (face font-lock-keyword-face fontified t) 652 653 (fontified t) 653 659 (face font-lock-type-face fontified t) 659 660 (face font-lock-type-face c-type c-decl-id-start fontified t) 660 662 (fontified t) 662 675 (face font-lock-function-name-face fontified t) 675 676 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 676 680 (face font-lock-type-face fontified t) 680 681 (fontified t) 681 692 (face font-lock-variable-name-face fontified t) 692 693 (face (rainbow-delimiters-depth-2-face) fontified t) 693 694 (face (rainbow-delimiters-depth-2-face) fontified t) 694 695 (c-type c-decl-arg-start fontified t) 695 696 (fontified t) 696 699 (face font-lock-type-face fontified t) 699 700 (fontified t) 700 710 (face font-lock-variable-name-face fontified t) 710 711 (face (rainbow-delimiters-depth-1-face) fontified t) 711 712 (fontified t) 712 713 (face (rainbow-delimiters-depth-1-face) fontified t) 713 715 (fontified t) 715 721 (face font-lock-keyword-face fontified t) 721 722 (fontified t) 722 728 (face font-lock-type-face fontified t) 728 729 (face font-lock-type-face c-type c-decl-id-start fontified t) 729 732 (fontified t) 732 735 (face font-lock-variable-name-face fontified t) 735 744 (fontified t) 744 745 (face (rainbow-delimiters-depth-2-face) fontified t) 745 751 (face font-lock-keyword-face fontified t) 751 752 (fontified t) 752 759 (face font-lock-type-face fontified t) 759 761 (fontified t) 761 762 (face (rainbow-delimiters-depth-2-face) fontified t) 762 769 (fontified t) 769 770 (face (rainbow-delimiters-depth-2-face) fontified t) 770 776 (face font-lock-keyword-face fontified t) 776 777 (face (rainbow-delimiters-depth-3-face) fontified t) 777 783 (face font-lock-keyword-face fontified t) 783 784 (fontified t) 784 791 (face font-lock-type-face fontified t) 791 792 (face (rainbow-delimiters-depth-3-face) fontified t) 792 793 (face (rainbow-delimiters-depth-2-face) fontified t) 793 794 (fontified t) 794 795 (fontified t c-is-sws t c-in-sws t) 795 796 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 796 798 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 798 833 (face font-lock-comment-face fontified t c-in-sws t) 833 834 (fontified t c-in-sws t) 834 835 (fontified t c-in-sws t c-is-sws t) 835 836 (face font-lock-type-face fontified t c-is-sws t) 836 837 (face font-lock-type-face fontified t) 837 838 (face font-lock-type-face c-type c-decl-id-start fontified t) 838 839 (fontified t) 839 840 (face font-lock-variable-name-face fontified t) 840 843 (fontified t) 843 846 (face font-lock-keyword-face fontified t) 846 847 (face (rainbow-delimiters-depth-2-face) fontified t) 847 863 (fontified t) 863 864 (face (rainbow-delimiters-depth-2-face) fontified t) 864 866 (fontified t) 866 867 (face (rainbow-delimiters-depth-2-face) fontified t) 867 879 (fontified t) 879 880 (face (rainbow-delimiters-depth-3-face) fontified t) 880 881 (fontified t) 881 882 (face (rainbow-delimiters-depth-3-face) fontified t) 882 896 (fontified t) 896 897 (face (rainbow-delimiters-depth-3-face) fontified t) 897 898 (fontified t) 898 899 (face (rainbow-delimiters-depth-3-face) fontified t) 899 902 (fontified t) 902 903 (face (rainbow-delimiters-depth-2-face) fontified t) 903 943 (fontified t) 943 947 (face font-lock-constant-face fontified t) 947 950 (fontified t) 950 956 (face font-lock-keyword-face fontified t) 956 962 (fontified t) 962 963 (face (rainbow-delimiters-depth-1-face) fontified t) 963 965 (fontified t)) . 1) (undo-tree-id112 . -18) (undo-tree-id113 . 417) (undo-tree-id114 . -965) (undo-tree-id115 . -548) (undo-tree-id116 . -548) (undo-tree-id117 . -548) (undo-tree-id118 . -964) (undo-tree-id119 . -550) (undo-tree-id120 . -550) (undo-tree-id121 . -550) (undo-tree-id122 . -550) (undo-tree-id123 . -550) (undo-tree-id124 . -550) (undo-tree-id125 . -550) (undo-tree-id126 . -550) (undo-tree-id127 . -550) (undo-tree-id128 . -550) (undo-tree-id129 . -550) (undo-tree-id130 . -550) (undo-tree-id131 . -550) (undo-tree-id132 . -550) (undo-tree-id133 . -550) (undo-tree-id134 . -550) (undo-tree-id135 . -550) (undo-tree-id136 . -550) (undo-tree-id137 . -550) (undo-tree-id138 . -550) (undo-tree-id139 . -550) (undo-tree-id140 . -550) (undo-tree-id141 . -550) (undo-tree-id142 . -550) (undo-tree-id143 . -550) (undo-tree-id144 . -550) (undo-tree-id145 . -550) (undo-tree-id146 . -550) (undo-tree-id147 . -550) (undo-tree-id148 . -550) (undo-tree-id149 . -550) (undo-tree-id150 . -550) (undo-tree-id151 . -550) (undo-tree-id152 . -550) (undo-tree-id153 . -550) (undo-tree-id154 . -548) (undo-tree-id155 . -550) (undo-tree-id156 . -548) (undo-tree-id157 . -548) (undo-tree-id158 . -842) (undo-tree-id159 . -965) (undo-tree-id160 . -965) (undo-tree-id161 . -833) (t 26225 24975 944582 382000)) nil (26264 57767 239435 372000) 0 nil])
([nil nil ((nil rear-nonsticky nil 972 . 973) (nil fontified nil 115 . 973) (nil fontified nil 114 . 115) (nil fontified nil 22 . 114) (nil fontified nil 20 . 22) (nil fontified nil 2 . 20) (nil fontified nil 1 . 2) (1 . 973)) nil (26264 57767 239377 73000) 0 nil])
([nil nil ((nil rear-nonsticky nil 66 . 67) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -86) (66 . 87)) nil (26264 57767 239373 416000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t ws-butler-chg chg fontified t c-is-sws t)) . 66)) nil (26264 57767 239371 883000) 0 nil])
([nil nil ((nil rear-nonsticky nil 131 . 132) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -151) (131 . 152)) nil (26264 57767 239370 9000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t ws-butler-chg chg fontified t c-is-sws t)) . 131)) nil (26264 57767 239368 226000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified t)) . -152) (undo-tree-id111 . -2) 154 (151 . 154) 151) nil (26264 57767 239366 914000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t ws-butler-chg chg)) . 84)) nil (26264 57767 239363 758000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t ws-butler-chg chg)) . 148)) nil (26264 57767 239362 105000) 0 nil])
([nil nil ((148 . 149)) nil (26264 57767 239360 882000) 0 nil])
([nil nil ((84 . 85)) nil (26264 57767 239359 409000) 0 nil])
([nil nil ((#(" x" 0 1 (fontified t ws-butler-chg chg) 1 2 (face font-lock-variable-name-face fontified t ws-butler-chg chg)) . 146) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1)) nil (26264 57767 239357 366000) 0 nil])
([nil nil ((#(" x" 0 1 (fontified t ws-butler-chg chg) 1 2 (face font-lock-variable-name-face fontified t ws-butler-chg chg)) . 81) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) 82) nil (26264 57767 239352 647000) 0 nil])
([nil nil ((453 . 457) (452 . 453) (449 . 449) (449 . 452) (448 . 450) (447 . 448) (444 . 444) (444 . 447) (437 . 444) (432 . 437) (431 . 431) (431 . 432) (428 . 431) (425 . 428)) nil (26264 57767 239347 136000) 0 nil])
([nil nil ((458 . 459)) nil (26264 57767 239342 838000) 0 nil])
([nil nil ((428 . 430)) nil (26264 57767 239341 436000) 0 nil])
([nil nil ((#("  " 0 1 (c-is-sws t fontified t ws-butler-chg chg) 1 2 (c-is-sws t fontified t ws-butler-chg chg)) . 428)) nil (26264 57767 239340 173000) 0 nil])
([nil nil ((285 . 288) (#("        " 0 8 (c-is-sws t c-in-sws t fontified t ws-butler-chg chg)) . -285) (undo-tree-id103 . -8) 293) nil (26264 57767 239338 700000) 0 nil])
([nil nil ((338 . 341) (#("           " 0 1 (c-is-sws t fontified t ws-butler-chg chg) 1 11 (c-in-sws t fontified t ws-butler-chg chg)) . 338) 290) nil (26264 57767 239335 825000) 0 nil])
([nil nil ((447 . 450) (#("        " 0 8 (fontified t c-in-sws t c-is-sws t ws-butler-chg chg)) . -447) (undo-tree-id102 . -8) 455) nil (26264 57767 239333 821000) 0 nil])
([nil nil ((663 . 665) (#("        " 0 1 (c-is-sws t fontified t ws-butler-chg chg) 1 8 (c-in-sws t fontified t ws-butler-chg chg)) . -663) (672 . 675) (#("        " 0 1 (c-is-sws t fontified t ws-butler-chg chg) 1 8 (fontified t ws-butler-chg chg)) . 672) (undo-tree-id97 . -8) (undo-tree-id98 . -8) (undo-tree-id99 . -8) (589 . 592) (#("           " 0 1 (c-is-sws t fontified t ws-butler-chg chg) 1 11 (fontified t ws-butler-chg chg)) . 589) (536 . 539) (#("        " 0 8 (fontified t ws-butler-chg chg)) . 536) (undo-tree-id100 . -8) (undo-tree-id101 . -8) 693) nil (26264 57767 239329 343000) 0 nil])
([nil nil ((508 . 509) (#("    " 0 4 (fontified t c-in-sws t c-is-sws t ws-butler-chg chg)) . -508) 516) nil (26264 57767 239237 79000) 0 nil])
([nil nil ((516 . 518) (515 . 516) (510 . 510) (510 . 515) (506 . 510) 452) nil (26264 57767 239235 306000) 0 nil])
([nil nil ((nil rear-nonsticky nil 529 . 530) (nil fontified nil 517 . 530) (517 . 530) 516) nil (26264 57767 239233 192000) 0 nil])
([nil nil ((534 . 535) (533 . 535) (#("\"" 0 1 (ws-butler-chg chg fontified nil)) . -533) (530 . 534)) nil (26264 57767 239231 419000) 0 nil])
([nil nil ((536 . 539)) nil (26264 57767 239229 385000) 0 nil])
([nil nil ((540 . 541) (539 . 541) (#("\"" 0 1 (ws-butler-chg chg fontified nil)) . -539) (539 . 540)) nil (26264 57767 239227 862000) 0 nil])
([nil nil ((542 . 544)) nil (26264 57767 239226 379000) 0 nil])
([nil nil ((545 . 546)) nil (26264 57767 239224 896000) 0 nil])
([nil nil ((729 . 732) (727 . 729) (724 . 724) (724 . 727) (723 . 725) (716 . 723) (707 . 716) (703 . 703) (703 . 707) (700 . 703) (#("	" 0 1 (c-is-sws t fontified nil c-in-sws t ws-butler-chg chg)) . -700) (undo-tree-id96 . -1) (#("	" 0 1 (c-is-sws t fontified t ws-butler-chg chg)) . 701)) nil (26264 57767 239222 782000) 0 nil])
([nil nil ((733 . 734)) nil (26264 57767 239217 112000) 0 nil])
([nil nil ((nil rear-nonsticky nil 806 . 807) (#("
" 0 1 (ws-butler-chg chg fontified nil)) . -843) (803 . 844) 802) nil (26264 57767 239215 378000) 0 nil])
([nil nil ((#("        
" 0 1 (c-is-sws t fontified t ws-butler-chg chg) 1 8 (c-is-sws t fontified t c-in-sws t ws-butler-chg chg) 8 9 (ws-butler-chg chg fontified t c-is-sws t)) . 795) (undo-tree-id55 . -8) (undo-tree-id56 . -7) (undo-tree-id57 . -7) (undo-tree-id58 . -7) (undo-tree-id59 . -7) (undo-tree-id60 . -7) (undo-tree-id61 . -7) (undo-tree-id62 . -7) (undo-tree-id63 . -7) (undo-tree-id64 . -7) (undo-tree-id65 . -7) (undo-tree-id66 . -7) (undo-tree-id67 . -7) (undo-tree-id68 . -7) (undo-tree-id69 . -7) (undo-tree-id70 . -7) (undo-tree-id71 . -6) (undo-tree-id72 . -6) (undo-tree-id73 . -6) (undo-tree-id74 . -6) (undo-tree-id75 . -6) (undo-tree-id76 . -6) (undo-tree-id77 . -6) (undo-tree-id78 . -6) (undo-tree-id79 . -6) (undo-tree-id80 . -6) (undo-tree-id81 . -6) (undo-tree-id82 . -6) (undo-tree-id83 . -6) (undo-tree-id84 . -6) (undo-tree-id85 . -6) (undo-tree-id86 . -6) (undo-tree-id87 . -6) (undo-tree-id88 . -6) (undo-tree-id89 . -6) (undo-tree-id90 . -6) (undo-tree-id91 . -6) (undo-tree-id92 . -6) (undo-tree-id93 . -6) (undo-tree-id94 . -6) (undo-tree-id95 . -9) 801) nil (26264 57767 239210 569000) 0 nil])
([nil nil ((828 . 829) (#("F" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . 828) (undo-tree-id54 . -1)) nil (26264 57767 239167 208000) 0 nil])
([nil nil ((829 . 831)) nil (26264 57767 239163 701000) 0 nil])
([nil nil ((#("\\n" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t) 1 2 (face font-lock-string-face ws-butler-chg chg fontified t)) . 829) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -2) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1)) nil (26264 57767 239158 91000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t c-in-sws t ws-butler-chg chg)) . 623) (#(" " 0 1 (face font-lock-comment-face c-in-sws t fontified t ws-butler-chg chg)) . 336) (1100 . 1101)) nil (26264 57767 239041 802000) 0 nil])
([nil nil ((828 . 829) (#("b" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -828) (undo-tree-id517 . -1) 829 (827 . 829) (t 26264 57767 254027 269000)) nil (26264 57899 741949 720000) 0 nil])
([nil nil ((827 . 828) (#("\\" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . 827) (827 . 828) (#("\\" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . 827)) nil (26264 57899 741946 294000) 0 nil])
([nil nil ((827 . 828) (#("\\" 0 1 (face font-lock-string-face ws-butler-chg chg fontified nil)) . 827) (nil ws-butler-chg delete 828 . 829) (827 . 828) (#("/" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . 827)) nil (26264 57899 741944 9000) 0 nil])
([nil nil ((#("\\b" 0 1 (face font-lock-string-face ws-butler-chg chg fontified nil) 1 2 (face font-lock-string-face ws-butler-chg chg fontified nil)) . 827) (nil ws-butler-chg delete 829 . 830) (828 . 829) (#("n" 0 1 (face font-lock-string-face fontified t)) . 828)) nil (26264 57899 741940 984000) 0 nil])
([nil nil ((827 . 829) (t 26264 57767 254027 269000)) nil (26264 57899 741938 729000) 0 nil])
([nil nil ((#("\\n" 0 1 (fontified t) 1 2 (fontified t)) . 830) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -2) 831) nil (26264 57899 741936 104000) 0 nil])
([nil nil ((541 . 542) (#("b" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -541) (undo-tree-id494 . -1) (undo-tree-id495 . -1) 542 (540 . 542)) nil (26264 57899 741915 145000) 0 nil])
([nil nil ((#("\\n" 0 1 (fontified t) 1 2 (fontified t)) . 543) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -2) 544) nil (26264 57899 741909 544000) 0 nil])
([nil nil ((#("+ \" \" " 0 1 (fontified t) 1 2 (fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (fontified t)) . 530) (undo-tree-id387 . -5) (undo-tree-id388 . -5) (undo-tree-id389 . -5) (undo-tree-id390 . -6) (undo-tree-id391 . -6) (undo-tree-id392 . -6) (undo-tree-id393 . -6) (undo-tree-id394 . -6) (undo-tree-id395 . -6) (undo-tree-id396 . -5) (undo-tree-id397 . -5) (undo-tree-id398 . -5) (undo-tree-id399 . -5) (undo-tree-id400 . -5) (undo-tree-id401 . -5) (undo-tree-id402 . -5) (undo-tree-id403 . -5) (undo-tree-id404 . -5) (undo-tree-id405 . -5) (undo-tree-id406 . -5) (undo-tree-id407 . -5) (undo-tree-id408 . -5) (undo-tree-id409 . -5) (undo-tree-id410 . -5) (undo-tree-id411 . -5) (undo-tree-id412 . -5) (undo-tree-id413 . -5) (undo-tree-id414 . -5) (undo-tree-id415 . -5) (undo-tree-id416 . -5) (undo-tree-id417 . -5) (undo-tree-id418 . -5) (undo-tree-id419 . -5) (undo-tree-id420 . -5) (undo-tree-id421 . -4) (undo-tree-id422 . -4) (undo-tree-id423 . -4) (undo-tree-id424 . -4) (undo-tree-id425 . -4) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4) (undo-tree-id429 . -4) (undo-tree-id430 . -4) (undo-tree-id431 . -4) (undo-tree-id432 . -4) (undo-tree-id433 . -3) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -3) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -3) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -6)) nil (26264 57899 741845 193000) 0 nil])
([nil nil ((533 . 534)) nil (26264 57899 741769 20000) 0 nil])
([nil nil ((#(" + \" \" " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (fontified t)) . 811) (undo-tree-id251 . -6) (undo-tree-id252 . -6) (undo-tree-id253 . -6) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -3) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -3) (undo-tree-id278 . -3) (undo-tree-id279 . -3) (undo-tree-id280 . -3) (undo-tree-id281 . -3) (undo-tree-id282 . -3) (undo-tree-id283 . -3) (undo-tree-id284 . -2) (undo-tree-id285 . -2) (undo-tree-id286 . -2) (undo-tree-id287 . -2) (undo-tree-id288 . -2) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -2) (undo-tree-id319 . -2) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) (undo-tree-id333 . -3) (undo-tree-id334 . -3) (undo-tree-id335 . -3) (undo-tree-id336 . -3) (undo-tree-id337 . -3) (undo-tree-id338 . -3) (undo-tree-id339 . -4) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -5) (undo-tree-id355 . -5) (undo-tree-id356 . -5) (undo-tree-id357 . -5) (undo-tree-id358 . -5) (undo-tree-id359 . -5) (undo-tree-id360 . -5) (undo-tree-id361 . -5) (undo-tree-id362 . -5) (undo-tree-id363 . -5) (undo-tree-id364 . -5) (undo-tree-id365 . -5) (undo-tree-id366 . -5) (undo-tree-id367 . -5) (undo-tree-id368 . -5) (undo-tree-id369 . -6) (undo-tree-id370 . -6) (undo-tree-id371 . -6) (undo-tree-id372 . -6) (undo-tree-id373 . -6) (undo-tree-id374 . -6) (undo-tree-id375 . -6) (undo-tree-id376 . -6) (undo-tree-id377 . -6) (undo-tree-id378 . -6) (undo-tree-id379 . -6) (undo-tree-id380 . -6) (undo-tree-id381 . -6) (undo-tree-id382 . -6) (undo-tree-id383 . -6) (undo-tree-id384 . -6) (undo-tree-id385 . -6) (undo-tree-id386 . -7) 817) nil (26264 57899 741760 103000) 0 nil])
([nil nil ((#("l" 0 1 (ws-butler-chg chg fontified t)) . -812) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) 813 (812 . 813) (811 . 812)) nil (26264 57899 741608 708000) 0 nil])
([nil nil ((815 . 816)) nil (26264 57899 741555 799000) 0 nil])
([nil nil ((#("convertedtemp" 0 12 (fontified t) 12 13 (fontified t rear-nonsticky t)) . 798) (undo-tree-id607 . -12) (undo-tree-id608 . -12) (undo-tree-id609 . -12) (undo-tree-id610 . -12) 810 (t 26264 57899 754872 489000)) nil (26264 57986 63702 314000) 0 nil])
([nil nil ((799 . 801) (798 . 800) (#("\"" 0 1 (ws-butler-chg chg face (rainbow-delimiters-depth-3-face) fontified nil)) . -798) (798 . 799)) nil (26264 57986 63694 960000) 0 nil])
([nil nil ((#("\" + \"" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t) 1 2 (ws-butler-chg delete fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (face font-lock-string-face fontified t)) . 801) (undo-tree-id525 . 5) (undo-tree-id526 . -4) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -2) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (undo-tree-id562 . -2) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2) (undo-tree-id572 . -2) (undo-tree-id573 . -2) (undo-tree-id574 . -3) (undo-tree-id575 . -3) (undo-tree-id576 . -3) (undo-tree-id577 . -3) (undo-tree-id578 . -3) (undo-tree-id579 . -3) (undo-tree-id580 . -3) (undo-tree-id581 . -3) (undo-tree-id582 . -3) (undo-tree-id583 . -3) (undo-tree-id584 . -3) (undo-tree-id585 . -3) (undo-tree-id586 . -3) (undo-tree-id587 . -3) (undo-tree-id588 . -3) (undo-tree-id589 . -4) (undo-tree-id590 . -4) (undo-tree-id591 . -4) (undo-tree-id592 . -4) (undo-tree-id593 . -4) (undo-tree-id594 . -4) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (undo-tree-id603 . -4) (undo-tree-id604 . -4) (undo-tree-id605 . -4) (undo-tree-id606 . -5) 805) nil (26264 57986 63688 248000) 0 nil])
([nil nil ((807 . 808) (806 . 807)) nil (26264 57986 63599 20000) 0 nil])
([nil nil ((nil rear-nonsticky nil 812 . 813) (nil fontified nil 808 . 813) (808 . 813) 807) nil (26264 57986 63596 946000) 0 nil])
([nil nil ((#("\" + \"" 0 4 (face font-lock-string-face fontified nil ws-butler-chg chg) 4 5 (face font-lock-string-face rear-nonsticky nil fontified nil ws-butler-chg chg)) . 808) (undo-tree-id521 . -4) (undo-tree-id522 . -4) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (nil rear-nonsticky t 812 . 813)) nil (26264 57986 63593 509000) 0 nil])
([nil nil ((812 . 821) (810 . 810) (810 . 812) (808 . 808) (808 . 810)) nil (26264 57986 63585 875000) 0 nil])
([nil nil ((539 . 540) (538 . 539)) nil (26264 57986 63582 789000) 0 nil])
([nil nil ((nil rear-nonsticky nil 552 . 553) (nil fontified nil 540 . 553) (540 . 553) 539) nil (26264 57986 63579 934000) 0 nil])
([nil nil ((533 . 535)) nil (26264 57986 63576 287000) 0 nil])
([nil nil ((#("convertedtemp + " 0 12 (fontified t) 12 13 (fontified t rear-nonsticky t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t)) . 516) (undo-tree-id518 . -15) (undo-tree-id519 . -15) (undo-tree-id520 . -15)) nil (26264 57986 63569 244000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1090) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) 1091 (t 26264 57986 78758 727000)) nil (26264 58471 208724 853000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 831) (undo-tree-id662 . -1)) nil (26264 58471 208717 770000) 0 nil])
([nil nil ((#("	" 0 1 (ws-butler-chg chg fontified t)) . -845) (undo-tree-id661 . -1) 846 (844 . 846) 831) nil (26264 58471 208713 572000) 0 nil])
([nil nil ((#("
	" 0 1 (ws-butler-chg chg fontified t) 1 2 (ws-butler-chg chg fontified nil)) . 844) (undo-tree-id658 . -1) (undo-tree-id659 . -2) (undo-tree-id660 . -1) (nil ws-butler-chg delete 846 . 847) (845 . 846)) nil (26264 58471 208708 302000) 0 nil])
([nil nil ((#("	" 0 1 (ws-butler-chg chg fontified t)) . -831) (undo-tree-id657 . -1) 832 (830 . 832) 825) nil (26264 58471 208698 163000) 0 nil])
([nil nil ((518 . 519) (#("d" 0 1 (face font-lock-string-face fontified t)) . 518) (undo-tree-id656 . -1)) nil (26264 58471 208693 424000) 0 nil])
([nil nil ((518 . 519)) nil (26264 58471 208689 546000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . 802) (undo-tree-id654 . -1) (undo-tree-id655 . -1)) nil (26264 58471 208686 761000) 0 nil])
([nil nil ((803 . 804) (#("d" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -803) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (#("f" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -804) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) 805 (804 . 805) (802 . 802) (802 . 804)) nil (26264 58471 208674 358000) 0 nil])
([nil nil ((1092 . 1093)) nil (26264 58471 208574 490000) 0 nil])
([nil nil ((802 . 804) (#("/" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -802) (undo-tree-id666 . -1) (#("2" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -803) (undo-tree-id667 . -1) 804 (803 . 804) (802 . 803) (t 26264 58471 225220 553000)) nil (26264 58582 22713 367000) 0 nil])
([nil nil ((518 . 520)) nil (26264 58582 22690 675000) 0 nil])
([nil nil ((519 . 520) (#("2" 0 1 (face font-lock-string-face fontified t)) . 519) (undo-tree-id669 . -1) (t 26264 58582 34923 583000)) nil (26264 58601 370367 679000) 0 nil])
([nil nil ((805 . 806) (#("2" 0 1 (face font-lock-string-face fontified t)) . 805) (undo-tree-id668 . -1)) nil (26264 58601 370358 161000) 0 nil])
([nil nil ((#("// insert prototype for function ftoc() here
double ctof(int);
// insert prototype for function ctof() here
double ftoc(int);


int main(void) {

    int usertemp;
    char unit;
    double convertedtemp;

    scanf(\"%d %c\", &usertemp, &unit);
    if (unit=='C'){
	  // insert function call here to convert usertemp
	  /* from Celsius to Fahrenheit and store the result in convertedtemp */
	  convertedtemp = ctof(usertemp);
	  // complete this line to print out the conversion result
	  printf(\"%.1lf F\\n\", convertedtemp);

	} else if (unit=='F'){

	  // insert function call here to convert usertemp
	  /* from Fahrenheit to Celsius and store the result in convertedtemp */
	  convertedtemp = ftoc(usertemp);
	  // complete this line to print out the conversion result
	  printf(\"%.1lf C\\n\", convertedtemp);
    }

    return 0;

}

/* Function definitions below are provided for you*/

/* Conversion from Celsius to Fahrenheit: */
double ctof(int x){
    return((9.0/5)*x+32);
}

/* Conversion from Fahrenheit to Celsius: */
double ftoc(int x){
    return(5.0/9*(x-32));
}
" 0 1 (c-is-sws t face font-lock-comment-delimiter-face fontified t) 1 3 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 3 44 (c-in-sws t face font-lock-comment-face fontified t) 44 45 (c-in-sws t face font-lock-comment-face fontified t) 45 46 (face font-lock-type-face fontified t c-is-sws t) 46 50 (face font-lock-type-face fontified t) 50 51 (face font-lock-type-face c-type c-decl-id-start fontified t) 51 52 (fontified t) 52 56 (face font-lock-function-name-face fontified t) 56 57 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 57 60 (face font-lock-type-face fontified t) 60 61 (face (rainbow-delimiters-depth-1-face) fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 64 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 64 66 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 66 107 (face font-lock-comment-face fontified t c-in-sws t) 107 108 (c-in-sws t face font-lock-comment-face fontified t) 108 109 (face font-lock-type-face fontified t c-is-sws t) 109 113 (face font-lock-type-face fontified t) 113 114 (face font-lock-type-face c-type c-decl-id-start fontified t) 114 115 (fontified t) 115 119 (face font-lock-function-name-face fontified t) 119 120 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 120 123 (face font-lock-type-face fontified t) 123 124 (face (rainbow-delimiters-depth-1-face) fontified t) 124 125 (fontified t) 125 126 (fontified t) 126 127 (fontified t) 127 128 (fontified t) 128 129 (face font-lock-type-face fontified t c-is-sws t) 129 130 (face font-lock-type-face fontified t) 130 131 (face font-lock-type-face c-type c-decl-id-start fontified t) 131 132 (fontified t) 132 136 (face font-lock-function-name-face fontified t) 136 137 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 137 141 (face font-lock-type-face fontified t) 141 142 (face (rainbow-delimiters-depth-1-face) fontified t) 142 143 (fontified t) 143 144 (face (rainbow-delimiters-depth-1-face) fontified t) 144 150 (fontified t) 150 152 (face font-lock-type-face fontified t) 152 153 (face font-lock-type-face c-type c-decl-id-start fontified t) 153 154 (fontified t) 154 162 (face font-lock-variable-name-face fontified t) 162 168 (fontified t) 168 171 (face font-lock-type-face fontified t) 171 172 (face font-lock-type-face c-type c-decl-id-start fontified t) 172 173 (fontified t) 173 177 (face font-lock-variable-name-face fontified t) 177 183 (fontified t) 183 188 (face font-lock-type-face fontified t) 188 189 (face font-lock-type-face c-type c-decl-id-start fontified t) 189 190 (fontified t) 190 203 (face font-lock-variable-name-face fontified t) 203 215 (fontified t) 215 216 (face (rainbow-delimiters-depth-2-face) fontified t) 216 223 (face font-lock-string-face fontified t) 223 241 (fontified t) 241 242 (face (rainbow-delimiters-depth-2-face) fontified t) 242 248 (fontified t) 248 250 (face font-lock-keyword-face fontified t) 250 251 (fontified t) 251 252 (face (rainbow-delimiters-depth-2-face) fontified t) 252 258 (fontified t) 258 261 (face font-lock-string-face fontified t) 261 262 (face (rainbow-delimiters-depth-2-face) fontified t) 262 263 (face (rainbow-delimiters-depth-2-face) fontified t) 263 264 (fontified t) 264 267 (c-is-sws t c-in-sws t fontified t) 267 268 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 268 270 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 270 315 (face font-lock-comment-face c-in-sws t fontified t) 315 316 (c-in-sws t face font-lock-comment-face fontified t) 316 317 (c-in-sws t fontified t) 317 319 (fontified t c-in-sws t) 319 320 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 320 322 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 322 386 (face font-lock-comment-face fontified t c-in-sws t) 386 389 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 389 390 (fontified t c-in-sws t) 390 391 (c-in-sws t c-is-sws t fontified t) 391 393 (c-in-sws t c-is-sws t fontified t) 393 394 (fontified t c-is-sws t) 394 395 (fontified t) 395 396 (fontified t) 396 397 (fontified t) 397 402 (fontified t) 402 403 (fontified t) 403 404 (fontified t) 404 405 (fontified t) 405 406 (fontified t) 406 407 (fontified t) 407 408 (fontified t) 408 409 (fontified t) 409 410 (fontified t) 410 411 (fontified t) 411 412 (fontified t) 412 413 (fontified t) 413 414 (face (rainbow-delimiters-depth-3-face) fontified t) 414 415 (fontified t) 415 416 (fontified t) 416 417 (fontified t) 417 418 (fontified t) 418 422 (fontified t) 422 423 (face (rainbow-delimiters-depth-3-face) fontified t) 423 424 (fontified t) 424 425 (fontified t) 425 428 (fontified t c-is-sws t c-in-sws t) 428 429 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 429 431 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 431 484 (face font-lock-comment-face fontified t c-in-sws t) 484 485 (c-in-sws t face font-lock-comment-face fontified t) 485 486 (fontified t c-is-sws t) 486 488 (fontified t c-is-sws t) 488 489 (fontified t c-is-sws t) 489 490 (fontified t) 490 491 (fontified t) 491 492 (fontified t) 492 493 (fontified t) 493 494 (fontified t) 494 495 (face (rainbow-delimiters-depth-3-face) fontified t) 495 496 (face font-lock-string-face fontified t) 496 497 (face font-lock-string-face fontified t) 497 498 (face font-lock-string-face fontified t) 498 499 (face font-lock-string-face fontified t) 499 500 (face font-lock-string-face fontified t) 500 501 (face font-lock-string-face fontified t) 501 502 (face font-lock-string-face fontified t) 502 503 (face font-lock-string-face fontified t) 503 504 (face font-lock-string-face fontified t) 504 505 (face font-lock-string-face fontified t) 505 506 (face font-lock-string-face fontified t) 506 507 (fontified t) 507 508 (fontified t) 508 520 (fontified t) 520 521 (rear-nonsticky t fontified t) 521 522 (face (rainbow-delimiters-depth-3-face) fontified t) 522 523 (fontified t) 523 524 (fontified t) 524 525 (fontified t c-is-sws t) 525 526 (fontified t c-is-sws t) 526 527 (face (rainbow-delimiters-depth-2-face) fontified t c-is-sws t) 527 528 (fontified t) 528 532 (face font-lock-keyword-face fontified t) 532 533 (fontified t) 533 535 (face font-lock-keyword-face fontified t) 535 536 (fontified t) 536 537 (face (rainbow-delimiters-depth-2-face) fontified t) 537 543 (fontified t) 543 546 (face font-lock-string-face fontified t) 546 547 (face (rainbow-delimiters-depth-2-face) fontified t) 547 548 (face (rainbow-delimiters-depth-2-face) fontified t) 548 549 (fontified t) 549 550 (fontified t) 550 553 (fontified t c-is-sws t c-in-sws t) 553 554 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 554 556 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 556 601 (face font-lock-comment-face fontified t c-in-sws t) 601 602 (face font-lock-comment-face fontified t c-in-sws t) 602 603 (fontified t c-in-sws t) 603 605 (fontified t c-in-sws t) 605 606 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 606 608 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 608 672 (face font-lock-comment-face fontified t c-in-sws t) 672 675 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 675 676 (fontified t c-in-sws t) 676 677 (fontified t c-in-sws t c-is-sws t) 677 679 (fontified t c-in-sws t c-is-sws t) 679 680 (fontified t c-is-sws t) 680 681 (fontified t) 681 682 (fontified t) 682 683 (fontified t) 683 692 (fontified t) 692 693 (fontified t) 693 694 (fontified t) 694 695 (fontified t) 695 696 (fontified t) 696 697 (fontified t) 697 698 (fontified t) 698 699 (fontified t) 699 700 (face (rainbow-delimiters-depth-3-face) fontified t) 700 701 (fontified t) 701 702 (fontified t) 702 703 (fontified t) 703 704 (fontified t) 704 705 (fontified t) 705 708 (fontified t) 708 709 (face (rainbow-delimiters-depth-3-face) fontified t) 709 710 (fontified t) 710 711 (fontified t) 711 712 (fontified t c-is-sws t c-in-sws t) 712 714 (fontified t c-is-sws t c-in-sws t) 714 715 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 715 717 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 717 770 (face font-lock-comment-face fontified t c-in-sws t) 770 771 (c-in-sws t face font-lock-comment-face fontified t) 771 772 (fontified t c-is-sws t) 772 773 (fontified t c-is-sws t) 773 774 (fontified t rear-nonsticky t c-is-sws t) 774 775 (fontified t c-is-sws t) 775 776 (fontified t) 776 777 (fontified t) 777 778 (fontified t) 778 779 (fontified t) 779 780 (fontified t) 780 781 (face (rainbow-delimiters-depth-3-face) fontified t) 781 782 (face font-lock-string-face fontified t) 782 783 (face font-lock-string-face fontified t) 783 784 (face font-lock-string-face fontified t) 784 785 (face font-lock-string-face fontified t) 785 786 (face font-lock-string-face fontified t) 786 787 (face font-lock-string-face fontified t) 787 788 (face font-lock-string-face fontified t) 788 789 (face font-lock-string-face fontified t) 789 790 (face font-lock-string-face fontified t) 790 791 (face font-lock-string-face fontified t) 791 792 (face font-lock-string-face fontified t) 792 793 (fontified t) 793 794 (fontified t) 794 795 (fontified t) 795 796 (fontified t) 796 797 (fontified t) 797 798 (fontified t) 798 807 (fontified t) 807 808 (face (rainbow-delimiters-depth-3-face) fontified t) 808 809 (fontified t) 809 810 (fontified t) 810 814 (fontified t c-in-sws t c-is-sws t) 814 815 (face (rainbow-delimiters-depth-2-face) fontified t c-is-sws t) 815 816 (fontified t) 816 817 (fontified t) 817 818 (fontified t) 818 821 (fontified t) 821 827 (face font-lock-keyword-face fontified t) 827 830 (fontified t) 830 831 (fontified t) 831 832 (fontified t) 832 833 (face (rainbow-delimiters-depth-1-face) fontified t) 833 835 (fontified t) 835 836 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 836 838 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 838 885 (face font-lock-comment-face fontified t c-in-sws t) 885 887 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 887 889 (fontified t c-in-sws t) 889 892 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 892 930 (face font-lock-comment-face fontified t c-in-sws t) 930 933 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 933 934 (fontified t c-in-sws t) 934 935 (face font-lock-type-face fontified t c-is-sws t) 935 939 (face font-lock-type-face fontified t) 939 940 (face font-lock-type-face c-type c-decl-id-start fontified t) 940 941 (fontified t) 941 945 (face font-lock-function-name-face fontified t) 945 946 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 946 949 (face font-lock-type-face fontified t) 949 950 (fontified t) 950 951 (face font-lock-variable-name-face fontified t) 951 952 (face (rainbow-delimiters-depth-1-face) fontified t) 952 953 (face (rainbow-delimiters-depth-1-face) fontified t) 953 958 (fontified t) 958 964 (face font-lock-keyword-face fontified t) 964 965 (face (rainbow-delimiters-depth-2-face) fontified t) 965 966 (face (rainbow-delimiters-depth-3-face) fontified t) 966 971 (fontified t) 971 972 (face (rainbow-delimiters-depth-3-face) fontified t) 972 977 (fontified t) 977 978 (face (rainbow-delimiters-depth-2-face) fontified t) 978 980 (fontified t) 980 981 (face (rainbow-delimiters-depth-1-face) fontified t) 981 983 (fontified t) 983 984 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 984 986 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 986 1024 (face font-lock-comment-face fontified t c-in-sws t) 1024 1027 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 1027 1028 (fontified t c-in-sws t) 1028 1029 (face font-lock-type-face fontified t c-is-sws t) 1029 1033 (face font-lock-type-face fontified t) 1033 1034 (face font-lock-type-face c-type c-decl-id-start fontified t) 1034 1035 (fontified t) 1035 1039 (face font-lock-function-name-face fontified t) 1039 1040 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 1040 1043 (face font-lock-type-face fontified t) 1043 1044 (fontified t) 1044 1045 (face font-lock-variable-name-face fontified t) 1045 1046 (face (rainbow-delimiters-depth-1-face) fontified t) 1046 1047 (face (rainbow-delimiters-depth-1-face) fontified t) 1047 1052 (fontified t) 1052 1058 (face font-lock-keyword-face fontified t) 1058 1059 (face (rainbow-delimiters-depth-2-face) fontified t) 1059 1065 (fontified t) 1065 1066 (face (rainbow-delimiters-depth-3-face) fontified t) 1066 1070 (fontified t) 1070 1071 (face (rainbow-delimiters-depth-3-face) fontified t) 1071 1072 (face (rainbow-delimiters-depth-2-face) fontified t) 1072 1074 (fontified t) 1074 1075 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t) 1075 1076 (fontified t)) . 21) (undo-tree-id933 . 577) (undo-tree-id934 . -1076) (undo-tree-id935 . -1075) (undo-tree-id936 . -1076) (undo-tree-id937 . -425) (undo-tree-id938 . -934) (undo-tree-id939 . -934) (undo-tree-id940 . -108) (undo-tree-id941 . -108) (undo-tree-id942 . -1028) (undo-tree-id943 . -1028) (undo-tree-id944 . -1074) (undo-tree-id945 . -60) (undo-tree-id946 . -393) (undo-tree-id947 . -405) (undo-tree-id948 . -495) (undo-tree-id949 . -789) (undo-tree-id950 . -789) (undo-tree-id951 . -789) (undo-tree-id952 . -783) (undo-tree-id953 . -794) (undo-tree-id954 . -794) (undo-tree-id955 . -806) (undo-tree-id956 . -495) (undo-tree-id957 . -830) (undo-tree-id958 . -830) (undo-tree-id959 . -244) (undo-tree-id960 . -602) (undo-tree-id961 . -783) (undo-tree-id962 . -784) (undo-tree-id963 . -1076) (undo-tree-id964 . -1076) (undo-tree-id965 . -1076) (undo-tree-id966 . -1076) (undo-tree-id967 . -1076) (undo-tree-id968 . -1076) (undo-tree-id969 . -1076) (undo-tree-id970 . -1076) (undo-tree-id971 . -1076) (undo-tree-id972 . -1076) (undo-tree-id973 . -1076) (undo-tree-id974 . -1076) (undo-tree-id975 . -1076) (undo-tree-id976 . -1076) (undo-tree-id977 . -1076) (undo-tree-id978 . -1076) (undo-tree-id979 . -1076) (undo-tree-id980 . -1076) (undo-tree-id981 . -1076) (undo-tree-id982 . -1076) (undo-tree-id983 . -1076) (undo-tree-id984 . -1076) (undo-tree-id985 . -1076) (undo-tree-id986 . -1076) (undo-tree-id987 . -1076) (undo-tree-id988 . -1076) (undo-tree-id989 . -1076) (undo-tree-id990 . -784) (undo-tree-id991 . -1076) (undo-tree-id992 . -1076) (undo-tree-id993 . -1076) (undo-tree-id994 . -1076) (undo-tree-id995 . -1076) 1097 (t 26264 58601 384993 101000)) nil (26264 59004 512218 189000) 0 nil])
([nil nil ((30 . 30) (30 . 34) (29 . 31) (26 . 26) (26 . 29) (#("i" 0 1 (fontified t ws-butler-chg chg)) . -26) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) 27 (24 . 24) (24 . 27) (23 . 23) (23 . 24) (21 . 21) (21 . 23) (20 . 21) 20) nil (26264 59004 512162 624000) 0 nil])
([nil nil ((37 . 39) (36 . 38) (35 . 36)) nil (26264 59004 512136 886000) 0 nil])
([nil nil ((38 . 40) (#("
" 0 1 (fontified t ws-butler-chg chg)) . -38) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) 39 (38 . 39)) nil (26264 59004 512132 768000) 0 nil])
([nil nil ((40 . 42) (38 . 40)) nil (26264 59004 512112 310000) 0 nil])
([nil nil ((#("      " 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 6 (fontified t ws-butler-chg chg)) . 38) (undo-tree-id670 . 2) (undo-tree-id671 . -3) (undo-tree-id672 . -3) (undo-tree-id673 . -3) (undo-tree-id674 . -3) (undo-tree-id675 . -3) (undo-tree-id676 . -3) (undo-tree-id677 . -3) (undo-tree-id678 . -4) (undo-tree-id679 . -4) (undo-tree-id680 . -4) (undo-tree-id681 . -4) (undo-tree-id682 . -4) (undo-tree-id683 . -4) (undo-tree-id684 . -4) (undo-tree-id685 . -4) (undo-tree-id686 . -4) (undo-tree-id687 . -4) (undo-tree-id688 . -4) (undo-tree-id689 . -4) (undo-tree-id690 . 2) (undo-tree-id691 . -4) (undo-tree-id692 . -4) (undo-tree-id693 . -4) (undo-tree-id694 . -4) (undo-tree-id695 . -4) (undo-tree-id696 . -3) (undo-tree-id697 . -3) (undo-tree-id698 . -3) (undo-tree-id699 . -3) (undo-tree-id700 . -3) (undo-tree-id701 . -3) (undo-tree-id702 . -3) (undo-tree-id703 . -3) (undo-tree-id704 . -3) (undo-tree-id705 . -3) (undo-tree-id706 . -3) (undo-tree-id707 . -3) (undo-tree-id708 . -3) (undo-tree-id709 . -3) (undo-tree-id710 . -3) (undo-tree-id711 . -3) (undo-tree-id712 . -3) (undo-tree-id713 . -3) (undo-tree-id714 . -3) (undo-tree-id715 . -3) (undo-tree-id716 . -3) (undo-tree-id717 . -3) (undo-tree-id718 . -3) (undo-tree-id719 . -3) (undo-tree-id720 . -3) (undo-tree-id721 . -3) (undo-tree-id722 . -3) (undo-tree-id723 . -2) (undo-tree-id724 . -2) (undo-tree-id725 . -2) (undo-tree-id726 . -2) (undo-tree-id727 . -2) (undo-tree-id728 . -2) (undo-tree-id729 . -2) (undo-tree-id730 . -2) (undo-tree-id731 . -2) (undo-tree-id732 . -2) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -2) (undo-tree-id749 . -2) (undo-tree-id750 . -2) (undo-tree-id751 . -2) (undo-tree-id752 . -2) (undo-tree-id753 . -2) (undo-tree-id754 . -2) (undo-tree-id755 . -2) (undo-tree-id756 . -2) (undo-tree-id757 . -2) (undo-tree-id758 . -3) (undo-tree-id759 . -3) (undo-tree-id760 . -3) (undo-tree-id761 . -3) (undo-tree-id762 . -3) (undo-tree-id763 . -3) (undo-tree-id764 . -3) (undo-tree-id765 . -3) (undo-tree-id766 . -3) (undo-tree-id767 . -3) (undo-tree-id768 . -3) (undo-tree-id769 . -3) (undo-tree-id770 . -3) (undo-tree-id771 . -3) (undo-tree-id772 . -3) (undo-tree-id773 . -3) (undo-tree-id774 . -3) (undo-tree-id775 . -3) (undo-tree-id776 . -3) (undo-tree-id777 . -3) (undo-tree-id778 . -3) (undo-tree-id779 . -3) (undo-tree-id780 . -3) (undo-tree-id781 . -3) (undo-tree-id782 . -3) (undo-tree-id783 . -3) (undo-tree-id784 . -3) (undo-tree-id785 . -3) (undo-tree-id786 . -3) (undo-tree-id787 . -3) (undo-tree-id788 . -3) (undo-tree-id789 . -3) (undo-tree-id790 . -3) (undo-tree-id791 . -3) (undo-tree-id792 . -3) (undo-tree-id793 . -3) (undo-tree-id794 . -3) (undo-tree-id795 . -3) (undo-tree-id796 . -3) (undo-tree-id797 . -3) (undo-tree-id798 . -3) (undo-tree-id799 . -3) (undo-tree-id800 . -3) (undo-tree-id801 . -3) (undo-tree-id802 . -3) (undo-tree-id803 . -3) (undo-tree-id804 . -3) (undo-tree-id805 . -3) (undo-tree-id806 . -3) (undo-tree-id807 . -3) (undo-tree-id808 . -3) (undo-tree-id809 . -3) (undo-tree-id810 . -3) (undo-tree-id811 . -3) (undo-tree-id812 . -3) (undo-tree-id813 . -3) (undo-tree-id814 . -3) (undo-tree-id815 . -3) (undo-tree-id816 . -3) (undo-tree-id817 . -3) (undo-tree-id818 . -3) (undo-tree-id819 . -3) (undo-tree-id820 . -3) (undo-tree-id821 . -3) (undo-tree-id822 . -3) (undo-tree-id823 . -3) (undo-tree-id824 . -3) (undo-tree-id825 . -3) (undo-tree-id826 . -3) (undo-tree-id827 . -3) (undo-tree-id828 . -3) (undo-tree-id829 . -3) (undo-tree-id830 . -3) (undo-tree-id831 . -3) (undo-tree-id832 . -3) (undo-tree-id833 . -3) (undo-tree-id834 . -3) (undo-tree-id835 . -3) (undo-tree-id836 . -3) (undo-tree-id837 . -3) (undo-tree-id838 . -3) (undo-tree-id839 . -3) (undo-tree-id840 . -3) (undo-tree-id841 . -3) (undo-tree-id842 . -3) (undo-tree-id843 . -3) (undo-tree-id844 . -3) (undo-tree-id845 . -3) (undo-tree-id846 . -3) (undo-tree-id847 . -3) (undo-tree-id848 . -3) (undo-tree-id849 . -3) (undo-tree-id850 . -3) (undo-tree-id851 . -3) (undo-tree-id852 . -3) (undo-tree-id853 . -3) (undo-tree-id854 . -3) (undo-tree-id855 . -3) (undo-tree-id856 . -3) (undo-tree-id857 . -3) (undo-tree-id858 . -3) (undo-tree-id859 . -3) (undo-tree-id860 . -3) (undo-tree-id861 . -3) (undo-tree-id862 . -3) (undo-tree-id863 . -3) (undo-tree-id864 . -3) (undo-tree-id865 . -3) (undo-tree-id866 . -3) (undo-tree-id867 . -3) (undo-tree-id868 . -3) (undo-tree-id869 . -3) (undo-tree-id870 . -3) (undo-tree-id871 . -3) (undo-tree-id872 . -3) (undo-tree-id873 . -3) (undo-tree-id874 . -3) (undo-tree-id875 . -3) (undo-tree-id876 . -3) (undo-tree-id877 . -3) (undo-tree-id878 . -3) (undo-tree-id879 . -3) (undo-tree-id880 . -3) (undo-tree-id881 . -3) (undo-tree-id882 . -3) (undo-tree-id883 . -3) (undo-tree-id884 . -3) (undo-tree-id885 . -3) (undo-tree-id886 . -3) (undo-tree-id887 . -3)) nil (26264 59004 512096 69000) 0 nil])
([nil nil ((56 . 58) (55 . 57) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil ws-butler-chg chg)) . -55) (55 . 56) (54 . 56) (49 . 54) (47 . 49) (46 . 47) (45 . 46) (40 . 45) (38 . 40) (t 26264 59004 526116 847000)) nil (26264 59108 200158 777000) 0 nil])
([nil nil ((61 . 63) (#("%" 0 1 (ws-butler-chg chg fontified t)) . -61) (undo-tree-id15 . -1) 62 (60 . 62) (59 . 60)) nil (26264 59108 200155 310000) 0 nil])
([nil nil ((64 . 65)) nil (26264 59108 200152 575000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified t)) . -66) (undo-tree-id1 . -2) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) 68 (65 . 68) 64) nil (26264 59108 200150 301000) 0 nil])
([nil nil ((78 . 80) (76 . 78) (75 . 77) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) ws-butler-chg chg fontified nil)) . -75) (75 . 76) (74 . 76) (68 . 74) (66 . 68)) nil (26264 59108 200132 787000) 0 nil])
([nil nil ((82 . 84) (81 . 82) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -81) (undo-tree-id0 . -1) 82 (81 . 82)) nil (26264 59108 200128 569000) 0 nil])
([nil nil ((85 . 86)) nil (26264 59108 200097 840000) 0 nil])
([nil nil ((nil rear-nonsticky nil 168 . 169) (nil fontified nil 76 . 169) (76 . 169) (#("%d" 0 2 (face font-lock-string-face fontified t)) . 76) (undo-tree-id66 . -2) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 78 (t 26264 59108 215988 981000)) nil (26264 59559 485535 240000) 0 nil])
([nil nil ((#(", n" 0 3 (fontified t)) . 172) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) 174) nil (26264 59559 485529 790000) 0 nil])
([nil nil ((#("(... you need to complete this line correctly ...)" 0 49 (face font-lock-string-face fontified t ws-butler-chg chg) 49 50 (face font-lock-string-face rear-nonsticky t fontified t ws-butler-chg chg)) . 119) (undo-tree-id59 . -49) (undo-tree-id60 . -49) (undo-tree-id61 . -49)) nil (26264 59559 485521 254000) 0 nil])
([nil nil ((119 . 139)) nil (26264 59559 485518 48000) 0 nil])
([nil nil ((nil rear-nonsticky nil 36 . 37) (nil fontified nil 21 . 37) (nil fontified nil 20 . 21) (20 . 37)) nil (26264 59559 485517 167000) 0 nil])
([nil nil ((37 . 38) 36) nil (26264 59559 485515 784000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . -84) (undo-tree-id58 . -1) 85 (84 . 85) (83 . 84) (81 . 83) (79 . 81) (78 . 79) (74 . 78) (73 . 74) (71 . 73) (69 . 71) (67 . 67) (67 . 69) (64 . 67) 56) nil (26264 59559 485513 850000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified t)) . -85) (undo-tree-id57 . -2) 87 (84 . 87) 83) nil (26264 59559 485509 392000) 0 nil])
([nil nil ((102 . 103) (101 . 103) (97 . 101) (90 . 97) (88 . 90) (87 . 88) (85 . 87)) nil (26264 59559 485506 747000) 0 nil])
([nil nil ((104 . 105)) nil (26264 59559 485504 934000) 0 nil])
([nil nil ((77 . 78) (76 . 77)) nil (26264 59559 485504 132000) 0 nil])
([nil nil ((80 . 83) (#("i" 0 1 (face font-lock-variable-name-face fontified t ws-butler-chg chg)) . -80) (undo-tree-id56 . -1) 81 (80 . 81) (79 . 80)) nil (26264 59559 485502 760000) 0 nil])
([nil nil ((#("exp" 0 1 (face font-lock-variable-name-face fontified t ws-butler-chg chg) 1 2 (face font-lock-variable-name-face fontified t ws-butler-chg chg) 2 3 (face font-lock-variable-name-face fontified t ws-butler-chg chg)) . 86) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) 88) nil (26264 59559 485499 434000) 0 nil])
([nil nil ((86 . 91)) nil (26264 59559 485495 356000) 0 nil])
([nil nil ((nil rear-nonsticky nil 107 . 108) (nil fontified nil 98 . 108) (98 . 108) (#("sqrt" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg)) . 98) (undo-tree-id48 . -4) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) 102) nil (26264 59559 485493 964000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-type-face c-type c-decl-id-start ws-butler-chg chg fontified t)) . -122) (undo-tree-id39 . -1) (#("o" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . -123) (undo-tree-id40 . -1) (#("w" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . -124) (undo-tree-id41 . -1) (#("e" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . -125) (undo-tree-id42 . -1) (#("r" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . -126) (undo-tree-id43 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -127) (undo-tree-id44 . -1) (#("k" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . -128) (undo-tree-id45 . -1) (#("k" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . -129) (undo-tree-id46 . -1) (#("k" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . -130) (undo-tree-id47 . -1) 131 (128 . 131) (122 . 128) (119 . 122) 118) nil (26264 59559 485487 311000) 0 nil])
([nil nil ((nil rear-nonsticky nil 128 . 129) (nil fontified nil 122 . 129) (122 . 129) 121) nil (26264 59559 485475 860000) 0 nil])
([nil nil ((#("’" 0 1 (fontified t ws-butler-chg chg)) . 127)) nil (26264 59559 485474 578000) 0 nil])
([nil nil ((128 . 131)) nil (26264 59559 485473 826000) 0 nil])
([nil nil ((122 . 123) (#("E" 0 1 (face font-lock-type-face fontified t ws-butler-chg chg)) . 122)) nil (26264 59559 485472 945000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-variable-name-face fontified t ws-butler-chg chg)) . 86)) nil (26264 59559 485471 703000) 0 nil])
([nil nil ((nil rear-nonsticky nil 86 . 87) (nil fontified nil 86 . 87) (86 . 87) (#("ower" 0 1 (face font-lock-variable-name-face fontified t ws-butler-chg delete) 1 2 (face font-lock-variable-name-face fontified t ws-butler-chg chg) 2 3 (face font-lock-variable-name-face fontified t ws-butler-chg chg) 3 4 (face font-lock-variable-name-face fontified t ws-butler-chg chg)) . 86) (undo-tree-id35 . -4) (undo-tree-id36 . -3) (undo-tree-id37 . -3) (undo-tree-id38 . -3) 90) nil (26264 59559 485470 470000) 0 nil])
([nil nil ((nil ws-butler-chg delete 90 . 91) (86 . 90) (#("p" 0 1 (face font-lock-variable-name-face rear-nonsticky nil fontified nil ws-butler-chg chg)) . 86) (nil rear-nonsticky t 86 . 87)) nil (26264 59559 485465 451000) 0 nil])
([nil nil ((nil ws-butler-chg delete 87 . 88) (86 . 87)) nil (26264 59559 485464 38000) 0 nil])
([nil nil ((nil rear-nonsticky nil 89 . 90) (nil fontified nil 86 . 90) (86 . 90) (#("power" 0 1 (face font-lock-variable-name-face fontified t ws-butler-chg chg) 1 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t ws-butler-chg chg) 3 4 (face font-lock-variable-name-face fontified t ws-butler-chg chg) 4 5 (face font-lock-variable-name-face fontified t ws-butler-chg chg)) . 86) (undo-tree-id29 . -5) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -5) (undo-tree-id33 . -5) (undo-tree-id34 . -4) 91) nil (26264 59559 485462 295000) 0 nil])
([nil nil ((nil rear-nonsticky nil 94 . 95) (nil fontified nil 86 . 95) (86 . 95) (#("ower" 0 3 (face font-lock-variable-name-face fontified t ws-butler-chg chg) 3 4 (face font-lock-variable-name-face rear-nonsticky t fontified t ws-butler-chg chg)) . 86) (undo-tree-id25 . -4) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) 90) nil (26264 59559 485454 962000) 0 nil])
([nil nil ((142 . 143) (141 . 143) (136 . 141) (135 . 136)) nil (26264 59559 485449 952000) 0 nil])
([nil nil ((144 . 145)) nil (26264 59559 485448 480000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . 156)) nil (26264 59559 485447 638000) 0 nil])
([nil nil ((156 . 158)) nil (26264 59559 485446 526000) 0 nil])
([nil nil ((nil rear-nonsticky nil 172 . 173) (nil fontified nil 163 . 173) (163 . 173) 162) nil (26264 59559 485445 614000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 162)) nil (26264 59559 485444 262000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified t)) . -175) (undo-tree-id24 . -2) 177 (174 . 177) 162) nil (26264 59559 485443 170000) 0 nil])
([nil nil ((nil rear-nonsticky nil 177 . 178) (#("
" 0 1 (ws-butler-chg chg fontified nil)) . -204) (175 . 205)) nil (26264 59559 485440 515000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . 175)) nil (26264 59559 485439 122000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified t)) . -283) (undo-tree-id23 . -2) 285 (282 . 285) 204) nil (26264 59559 485437 780000) 0 nil])
([nil nil ((#("scan" 0 4 (fontified t)) . 148) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -3) (undo-tree-id22 . -3) 151) nil (26264 59559 485434 654000) 0 nil])
([nil nil ((148 . 153)) nil (26264 59559 485428 92000) 0 nil])
([nil nil ((nil rear-nonsticky nil 182 . 183) (nil fontified nil 178 . 183) (178 . 183) (#("scan" 0 4 (fontified t ws-butler-chg chg)) . 178) (undo-tree-id15 . -4) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) 182) nil (26264 59559 485426 259000) 0 nil])
([nil nil ((nil rear-nonsticky nil 201 . 202) (nil fontified nil 193 . 202) (193 . 202) (#("squareroot" 0 1 (fontified t ws-butler-chg chg) 1 9 (fontified t ws-butler-chg chg) 9 10 (fontified t ws-butler-chg chg rear-nonsticky t)) . 193) (undo-tree-id11 . -10) (undo-tree-id12 . -9) (undo-tree-id13 . -9) (undo-tree-id14 . -9) 203) nil (26264 59559 485419 5000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 284) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1)) nil (26264 59559 485410 520000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t ws-butler-chg chg)) . 97)) nil (26264 59559 485358 674000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . 160) (undo-tree-id72 . -1) (t 26264 59559 583943 785000)) nil (26264 59582 753203 855000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . 189) (undo-tree-id70 . -1) (undo-tree-id71 . -1)) nil (26264 59582 753196 1000) 0 nil])
([nil nil ((157 . 159) (t 26264 59582 770007 980000)) nil (26264 59673 948679 557000) 0 nil])
([nil nil ((188 . 190)) nil (26264 59673 948678 304000) 0 nil])
([nil nil ((113 . 115) (112 . 113) (107 . 111) (106 . 108) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil ws-butler-chg chg)) . -106) (106 . 107) (105 . 107) (100 . 105) (98 . 100) (97 . 98)) nil (26264 59673 948676 120000) 0 nil])
([nil nil ((116 . 117)) nil (26264 59673 948672 473000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified t)) . -118) (undo-tree-id74 . -2) 120 (117 . 120) 116) nil (26264 59673 948669 217000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified t)) . -165) (undo-tree-id73 . -2) 167 (164 . 167) 143) nil (26264 59673 948662 184000) 0 nil])
([nil nil ((114 . 115) (t 26264 59673 964874 576000)) nil (26264 59707 534603 773000) 0 nil])
([nil nil ((#("#include <math.h>
" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t c-is-sws t) 1 8 (face font-lock-preprocessor-face c-in-sws t fontified t) 8 9 (c-in-sws t fontified t) 9 10 (face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t category c-<-as-paren-syntax fontified t) 10 16 (face font-lock-string-face c-in-sws t fontified t) 16 17 (face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t category c->-as-paren-syntax rear-nonsticky t fontified t) 17 18 (fontified t c-in-sws t)) . 20) (undo-tree-id118 . -17) (undo-tree-id119 . -17) (undo-tree-id120 . -16) 36 (t 26264 59707 554400 420000)) nil (26264 59738 139750 951000) 0 nil])
([nil nil ((nil rear-nonsticky nil 19 . 20) (#("
" 0 1 (ws-butler-chg chg fontified nil c-in-sws t)) . -37) (20 . 38) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 19 . 20) (nil fontified t 19 . 20) (nil c-in-sws t 19 . 20) (19 . 20) 1) nil (26264 59738 139746 883000) 0 nil])
([nil nil ((nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 19 . 20) (nil c-in-sws t 19 . 20) (nil fontified t 19 . 20) (19 . 20) 1) nil (26264 59738 139744 278000) 0 nil])
([nil nil ((1 . 2)) nil (26264 59738 139742 294000) 0 nil])
([nil nil ((#("#include <math.h>
" 0 1 (face font-lock-preprocessor-face ws-butler-chg chg fontified t c-in-sws t c-is-sws t) 1 8 (face font-lock-preprocessor-face ws-butler-chg chg fontified t c-in-sws t) 8 9 (ws-butler-chg chg fontified t c-in-sws t) 9 10 (face (rainbow-delimiters-depth-1-face font-lock-string-face) category c-<-as-paren-syntax ws-butler-chg chg fontified t c-in-sws t) 10 16 (face font-lock-string-face ws-butler-chg chg fontified t c-in-sws t) 16 17 (face (rainbow-delimiters-depth-1-face font-lock-string-face) category c->-as-paren-syntax ws-butler-chg chg fontified t c-in-sws t rear-nonsticky t) 17 18 (c-in-sws t ws-butler-chg delete fontified t)) . 22) (undo-tree-id115 . -17) (undo-tree-id116 . -17) (undo-tree-id117 . -18)) nil (26264 59738 139740 822000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (fontified nil c-in-sws t ws-butler-chg chg)) . -19) (1 . 20)) nil (26264 59738 139736 53000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t ws-butler-chg chg fontified t)) . 1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1)) nil (26264 59738 139731 564000) 0 nil])
([nil nil ((#("
" 0 1 (c-in-sws t c-is-sws t rear-nonsticky t ws-butler-chg chg fontified t)) . 38) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1)) nil (26264 59738 139596 62000) 0 nil])
([nil nil ((nil rear-nonsticky nil 131 . 132) (nil fontified nil 122 . 132) (122 . 132) (#("squareroot" 0 9 (fontified t) 9 10 (fontified t rear-nonsticky t)) . 122) (undo-tree-id197 . -10) (undo-tree-id198 . -9) (undo-tree-id199 . -9) (undo-tree-id200 . -9) (undo-tree-id201 . -9) 132 (t 26264 59738 160707 23000)) nil (26264 60076 763167 203000) 0 nil])
([nil nil ((317 . 318) (316 . 317) (#("-" 0 1 (ws-butler-chg chg fontified t)) . -316) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) 317 (315 . 317) (314 . 315) (311 . 314) (309 . 309) (309 . 311) (306 . 309) 228) nil (26264 60076 763138 199000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified t)) . -307) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) 309 (306 . 309) 238) nil (26264 60076 763104 546000) 0 nil])
([nil nil ((#("
  " 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified nil)) . 306) (undo-tree-id121 . -1) (undo-tree-id122 . -3) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -3) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (nil ws-butler-chg delete 309 . 310) (307 . 309)) nil (26264 60076 763082 494000) 0 nil])
([nil nil ((#("\\n" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 109) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -2) 110 (t 26264 60076 779567 198000)) nil (26265 6295 703642 581000) 0 nil])
([nil nil ((176 . 178) (t 26265 6295 722151 883000)) nil (26265 6412 184270 401000) 0 nil])
([nil nil ((210 . 212) (#("0" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -210) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) 211 (210 . 211) (209 . 210)) nil (26265 6412 184263 208000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 233) (t 26265 6412 206159 359000)) nil (26265 7003 750615 884000) 0 nil])
([nil nil ((#("r" 0 1 (ws-butler-chg delete fontified t)) . 233)) nil (26265 7003 750614 782000) 0 nil])
([nil nil ((#("i" 0 1 (ws-butler-chg delete fontified t)) . 233)) nil (26265 7003 750613 870000) 0 nil])
([nil nil ((#("n" 0 1 (ws-butler-chg delete fontified t)) . 233)) nil (26265 7003 750613 119000) 0 nil])
([nil nil ((nil ws-butler-chg delete 234 . 235) (233 . 234)) nil (26265 7003 750612 347000) 0 nil])
([nil nil ((nil ws-butler-chg delete 234 . 235) (233 . 234)) nil (26265 7003 750611 475000) 0 nil])
([nil nil ((nil ws-butler-chg delete 234 . 235) (233 . 234)) nil (26265 7003 750610 564000) 0 nil])
([nil nil ((nil ws-butler-chg delete 234 . 235) (233 . 234)) nil (26265 7003 750609 412000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 233) (t 26265 6412 206159 359000)) nil (26265 7003 750608 360000) 0 nil])
([nil nil ((#("r" 0 1 (ws-butler-chg delete fontified t)) . 233)) nil (26265 7003 750607 398000) 0 nil])
([nil nil ((#("i" 0 1 (ws-butler-chg delete fontified t)) . 233)) nil (26265 7003 750606 496000) 0 nil])
([nil nil ((#("n" 0 1 (ws-butler-chg delete fontified t)) . 233) (undo-tree-id263 . -1) (undo-tree-id264 . -1)) nil (26265 7003 750605 434000) 0 nil])
([nil nil ((#("t" 0 1 (ws-butler-chg delete fontified t)) . 233) (undo-tree-id261 . -1) (undo-tree-id262 . -1)) nil (26265 7003 750600 605000) 0 nil])
([nil nil ((nil ws-butler-chg delete 234 . 235) (233 . 234)) nil (26265 7003 750585 647000) 0 nil])
([nil nil ((nil ws-butler-chg delete 234 . 235) (233 . 234)) nil (26265 7003 750584 655000) 0 nil])
([nil nil ((nil ws-butler-chg delete 234 . 235) (233 . 234)) nil (26265 7003 750583 553000) 0 nil])
([nil nil ((nil ws-butler-chg delete 234 . 235) (233 . 234)) nil (26265 7003 750582 331000) 0 nil])
([nil nil ((nil ws-butler-chg delete 234 . 235) (233 . 234)) nil (26265 7003 750581 88000) 0 nil])
([nil nil ((nil rear-nonsticky nil 234 . 235) (nil fontified nil 234 . 235) (234 . 235) 233 (t 26265 6412 206159 359000)) nil (26265 7003 750578 734000) 0 nil])
([nil nil ((#("t" 0 1 (rear-nonsticky nil fontified nil ws-butler-chg chg)) . 234) (nil rear-nonsticky t 234 . 235)) nil (26265 7003 750574 827000) 0 nil])
([nil nil ((283 . 287) (t 26265 6412 206159 359000)) nil (26265 7003 750568 44000) 0 nil])
([nil nil ((160 . 161) (#("n" 0 1 (fontified t)) . 160) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (t 26265 7003 766249 743000)) nil (26265 7078 763345 186000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -327) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) 328 (t 26265 7078 783350 642000)) nil (26266 15213 735158 512000) 0 nil])
([nil nil ((327 . 328)) nil (26266 15213 735135 657000) 0 nil])
([nil nil ((166 . 166) (166 . 168) (164 . 166) (t 26266 15213 757005 926000)) nil (26268 3463 88484 44000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . 167) (undo-tree-id523 . -1)) nil (26268 3463 88483 313000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-type-face c-type c-decl-id-start ws-butler-chg chg fontified t)) . 166) (undo-tree-id521 . -1) (undo-tree-id522 . -1)) nil (26268 3463 88482 401000) 0 nil])
([nil nil ((166 . 166) (166 . 168) (164 . 166) (#(" " 0 1 (ws-butler-chg chg fontified nil)) . -164) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . 165) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1)) nil (26268 3463 88480 447000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-type-face c-type c-decl-id-start ws-butler-chg chg fontified t)) . 167) (undo-tree-id499 . -1)) nil (26268 3463 88471 991000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-type-face c-type c-decl-id-start ws-butler-chg chg fontified t)) . 166) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1)) nil (26268 3463 88470 919000) 0 nil])
([nil nil ((166 . 166) (166 . 168) (164 . 166) (#(" " 0 1 (ws-butler-chg chg fontified nil)) . -164) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . 165) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1)) nil (26268 3463 88464 928000) 0 nil])
([nil nil ((#("do" 0 1 (face font-lock-keyword-face ws-butler-chg chg fontified t) 1 2 (face font-lock-keyword-face ws-butler-chg chg fontified t)) . 166) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -2) (undo-tree-id306 . -2) (undo-tree-id307 . -2) (undo-tree-id308 . -2) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -2) (undo-tree-id319 . -2) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (undo-tree-id325 . -2) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -2) 167) nil (26268 3463 88410 706000) 0 nil])
([nil nil ((166 . 167) (164 . 166) (#(" " 0 1 (ws-butler-chg chg fontified nil)) . -164) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . 165) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1)) nil (26268 3463 88363 557000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-type-face c-type c-decl-id-start ws-butler-chg chg fontified t)) . -167) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 168 (167 . 168)) nil (26268 3463 88243 611000) 0 nil])
([nil nil ((174 . 176) (172 . 174) (169 . 172) (167 . 169)) nil (26268 3463 88234 955000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified nil)) . 167) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (#("sca" 0 1 (ws-butler-chg chg fontified nil) 1 2 (ws-butler-chg chg fontified nil) 2 3 (ws-butler-chg chg fontified nil)) . 169) (undo-tree-id32 . -3) (undo-tree-id33 . -3) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (#("nf" 0 1 (ws-butler-chg chg fontified nil) 1 2 (ws-butler-chg chg fontified nil)) . 172) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (#("()" 0 1 (face (rainbow-delimiters-depth-2-face) ws-butler-chg chg fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) ws-butler-chg chg fontified t)) . 174) (undo-tree-id40 . 1)) nil (26268 3463 88232 981000) 0 nil])
([nil nil ((171 . 175) (169 . 169) (169 . 171) (#("d" 0 1 (face font-lock-type-face c-type c-decl-id-start ws-butler-chg chg fontified t)) . -169) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("o" 0 1 (face font-lock-keyword-face fontified t ws-butler-chg chg)) . -170) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 171 (169 . 169) (169 . 171) (167 . 169)) nil (26268 3463 88226 28000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-type-face c-type c-decl-id-start ws-butler-chg chg fontified t)) . 174) (undo-tree-id23 . -1)) nil (26268 3463 88221 249000) 0 nil])
([nil nil ((#("doubl" 0 1 (face font-lock-type-face ws-butler-chg chg fontified t) 1 2 (face font-lock-type-face ws-butler-chg chg fontified t) 2 4 (face font-lock-type-face ws-butler-chg chg fontified t) 4 5 (face font-lock-type-face c-type c-decl-id-start ws-butler-chg chg fontified t)) . 169) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -5)) nil (26268 3463 88219 986000) 0 nil])
([nil nil ((169 . 173) (167 . 169) (#(" " 0 1 (ws-butler-chg chg fontified nil)) . -167) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . 168) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1)) nil (26268 3463 88216 400000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified t)) . 164)) nil (26268 3463 88186 984000) 0 nil])
([nil nil ((#("  main
" 0 2 (fontified t) 2 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t)) . 165) (undo-tree-id1093 . -7) (undo-tree-id1094 . -6) (t 26268 3463 145794 489000)) nil (26268 3490 748767 580000) 0 nil])
([nil nil ((169 . 173) (#("p" 0 1 (face font-lock-type-face c-type c-decl-id-start ws-butler-chg chg fontified t)) . -169) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (#("r" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . -170) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (#("i" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . -171) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (#("n" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . -172) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) 173 (169 . 173) (167 . 169) (166 . 167) (164 . 166)) nil (26268 3490 748758 513000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified nil)) . 164) (undo-tree-id0 . -2) (undo-tree-id1 . -2) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -2) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -2) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -2) (undo-tree-id102 . -2) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -2) (undo-tree-id108 . -2) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -2) (undo-tree-id179 . -2) (undo-tree-id180 . -2) (undo-tree-id181 . -2) (undo-tree-id182 . -2) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -2) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -2) (undo-tree-id199 . -2) (undo-tree-id200 . -2) (undo-tree-id201 . -2) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (undo-tree-id204 . -2) (undo-tree-id205 . -2) (undo-tree-id206 . -2) (undo-tree-id207 . -2) (undo-tree-id208 . -2) (#("
" 0 1 (ws-butler-chg chg fontified t)) . 166) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#("  " 0 2 (ws-butler-chg chg fontified nil)) . 167) (undo-tree-id418 . -2) (undo-tree-id419 . -2) (undo-tree-id420 . -2) (undo-tree-id421 . -2) (undo-tree-id422 . -2) (undo-tree-id423 . -2) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (undo-tree-id489 . -2) (undo-tree-id490 . -2) (undo-tree-id491 . -2) (undo-tree-id492 . -2) (undo-tree-id493 . -2) (undo-tree-id494 . -2) (undo-tree-id495 . -2) (undo-tree-id496 . -2) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) (undo-tree-id502 . -2) (undo-tree-id503 . -2) (undo-tree-id504 . -2) (undo-tree-id505 . -2) (undo-tree-id506 . -2) (undo-tree-id507 . -2) (undo-tree-id508 . -2) (undo-tree-id509 . -2) (undo-tree-id510 . -2) (undo-tree-id511 . -2) (undo-tree-id512 . -2) (undo-tree-id513 . -2) (undo-tree-id514 . -2) (undo-tree-id515 . -2) (undo-tree-id516 . -2) (undo-tree-id517 . -2) (undo-tree-id518 . -2) (undo-tree-id519 . -2) (undo-tree-id520 . -2) (undo-tree-id521 . -2) (undo-tree-id522 . -2) (undo-tree-id523 . -2) (undo-tree-id524 . -2) (undo-tree-id525 . -2) (undo-tree-id526 . -2) (undo-tree-id527 . -2) (undo-tree-id528 . -2) (undo-tree-id529 . -2) (undo-tree-id530 . -2) (undo-tree-id531 . -2) (undo-tree-id532 . -2) (undo-tree-id533 . -2) (undo-tree-id534 . -2) (undo-tree-id535 . -2) (undo-tree-id536 . -2) (undo-tree-id537 . -2) (undo-tree-id538 . -2) (undo-tree-id539 . -2) (undo-tree-id540 . -2) (undo-tree-id541 . -2) (undo-tree-id542 . -2) (undo-tree-id543 . -2) (undo-tree-id544 . -2) (undo-tree-id545 . -2) (undo-tree-id546 . -2) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -2) (undo-tree-id551 . -2) (undo-tree-id552 . -2) (undo-tree-id553 . -2) (undo-tree-id554 . -2) (undo-tree-id555 . -2) (undo-tree-id556 . -2) (undo-tree-id557 . -2) (undo-tree-id558 . -2) (undo-tree-id559 . -2) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (undo-tree-id562 . -2) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2) (undo-tree-id572 . -2) (undo-tree-id573 . -2) (undo-tree-id574 . -2) (undo-tree-id575 . -2) (undo-tree-id576 . -2) (undo-tree-id577 . -2) (undo-tree-id578 . -2) (undo-tree-id579 . -2) (undo-tree-id580 . -2) (undo-tree-id581 . -2) (undo-tree-id582 . -2) (undo-tree-id583 . -2) (undo-tree-id584 . -2) (undo-tree-id585 . -2) (undo-tree-id586 . -2) (undo-tree-id587 . -2) (undo-tree-id588 . -2) (undo-tree-id589 . -2) (undo-tree-id590 . -2) (undo-tree-id591 . -2) (undo-tree-id592 . -2) (undo-tree-id593 . -2) (undo-tree-id594 . -2) (undo-tree-id595 . -2) (undo-tree-id596 . -2) (undo-tree-id597 . -2) (undo-tree-id598 . -2) (undo-tree-id599 . -2) (undo-tree-id600 . -2) (undo-tree-id601 . -2) (undo-tree-id602 . -2) (undo-tree-id603 . -2) (undo-tree-id604 . -2) (undo-tree-id605 . -2) (undo-tree-id606 . -2) (undo-tree-id607 . -2) (undo-tree-id608 . -2) (undo-tree-id609 . -2) (undo-tree-id610 . -2) (undo-tree-id611 . -2) (undo-tree-id612 . -2) (undo-tree-id613 . -2) (undo-tree-id614 . -2) (undo-tree-id615 . -2) (undo-tree-id616 . -2) (undo-tree-id617 . -2) (undo-tree-id618 . -2) (undo-tree-id619 . -2) (undo-tree-id620 . -2) (undo-tree-id621 . -2) (undo-tree-id622 . -2) (undo-tree-id623 . -2) (undo-tree-id624 . -2) (undo-tree-id625 . -2) (#("prin" 0 1 (face font-lock-type-face ws-butler-chg chg fontified nil) 1 2 (face font-lock-type-face fontified nil ws-butler-chg chg) 2 3 (face font-lock-type-face fontified nil ws-butler-chg chg) 3 4 (face font-lock-type-face fontified nil ws-butler-chg chg)) . 169) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -2) (undo-tree-id643 . -2) (undo-tree-id644 . -2) (undo-tree-id645 . -2) (undo-tree-id646 . -2) (undo-tree-id647 . -2) (undo-tree-id648 . -2) (undo-tree-id649 . -2) (undo-tree-id650 . -2) (undo-tree-id651 . -2) (undo-tree-id652 . -2) (undo-tree-id653 . -2) (undo-tree-id654 . -2) (undo-tree-id655 . -2) (undo-tree-id656 . -2) (undo-tree-id657 . -2) (undo-tree-id658 . -3) (undo-tree-id659 . -3) (undo-tree-id660 . -3) (undo-tree-id661 . -3) (undo-tree-id662 . -3) (undo-tree-id663 . -3) (undo-tree-id664 . -4) (undo-tree-id665 . -4) (undo-tree-id666 . -4) (undo-tree-id667 . -4) (undo-tree-id668 . -4) (undo-tree-id669 . -4) (undo-tree-id670 . -4) (undo-tree-id671 . -4) (undo-tree-id672 . -4) (undo-tree-id673 . -4) (undo-tree-id674 . -4) (undo-tree-id675 . -4) (undo-tree-id676 . -4) (undo-tree-id677 . -4) (undo-tree-id678 . -4) (undo-tree-id679 . -4) (undo-tree-id680 . -4) (undo-tree-id681 . -4) (undo-tree-id682 . -4) (undo-tree-id683 . -4) (undo-tree-id684 . -4) (undo-tree-id685 . -4) (undo-tree-id686 . -4) (undo-tree-id687 . -4) (undo-tree-id688 . -4) (undo-tree-id689 . -4) (undo-tree-id690 . -4) (undo-tree-id691 . -4) (undo-tree-id692 . -4) (undo-tree-id693 . -4) (undo-tree-id694 . -4) (undo-tree-id695 . -3) (undo-tree-id696 . -3) (undo-tree-id697 . -3) (undo-tree-id698 . -3) (undo-tree-id699 . -3) (undo-tree-id700 . -3) (undo-tree-id701 . -3) (undo-tree-id702 . -3) (undo-tree-id703 . -3) (undo-tree-id704 . -3) (undo-tree-id705 . -3) (undo-tree-id706 . -2) (undo-tree-id707 . -2) (undo-tree-id708 . -2) (undo-tree-id709 . -2) (undo-tree-id710 . -2) (undo-tree-id711 . -2) (undo-tree-id712 . -2) (undo-tree-id713 . -2) (undo-tree-id714 . -2) (undo-tree-id715 . -2) (undo-tree-id716 . -2) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -4) (170 . 173) (nil ws-butler-chg delete 170 . 171) (169 . 170) (#("scan" 0 1 (face font-lock-type-face ws-butler-chg chg fontified t) 1 2 (face font-lock-type-face ws-butler-chg chg fontified t) 2 3 (face font-lock-type-face ws-butler-chg chg fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start ws-butler-chg chg fontified t)) . 169) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -2) (undo-tree-id736 . -2) (undo-tree-id737 . -2) (undo-tree-id738 . -2) (undo-tree-id739 . -2) (undo-tree-id740 . -2) (undo-tree-id741 . -2) (undo-tree-id742 . -2) (undo-tree-id743 . -2) (undo-tree-id744 . -2) (undo-tree-id745 . -2) (undo-tree-id746 . -3) (undo-tree-id747 . -3) (undo-tree-id748 . -3) (undo-tree-id749 . -3) (undo-tree-id750 . -3) (undo-tree-id751 . -3) (undo-tree-id752 . -3) (undo-tree-id753 . -3) (undo-tree-id754 . -3) (undo-tree-id755 . -3) (undo-tree-id756 . -3) (undo-tree-id757 . -3) (undo-tree-id758 . -3) (undo-tree-id759 . -3) (undo-tree-id760 . -3) (undo-tree-id761 . -3) (undo-tree-id762 . -3) (undo-tree-id763 . -3) (undo-tree-id764 . -3) (undo-tree-id765 . -3) (undo-tree-id766 . -3) (undo-tree-id767 . -3) (undo-tree-id768 . -3) (undo-tree-id769 . -3) (undo-tree-id770 . -3) (undo-tree-id771 . -3) (undo-tree-id772 . -3) (undo-tree-id773 . -3) (undo-tree-id774 . -3) (undo-tree-id775 . -3) (undo-tree-id776 . -3) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -4) (undo-tree-id781 . -4) (undo-tree-id782 . -4) (undo-tree-id783 . -4) (undo-tree-id784 . -4) (undo-tree-id785 . -4) (undo-tree-id786 . -4) (undo-tree-id787 . -4) (undo-tree-id788 . -4) (undo-tree-id789 . -4) (undo-tree-id790 . -4) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (undo-tree-id798 . -4) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) (undo-tree-id806 . -4) (undo-tree-id807 . -4) (undo-tree-id808 . -4) (undo-tree-id809 . -4) (undo-tree-id810 . -4) (undo-tree-id811 . -4) (undo-tree-id812 . -4) (undo-tree-id813 . -3) (undo-tree-id814 . -3) (undo-tree-id815 . -3) (undo-tree-id816 . -3) (undo-tree-id817 . -3) (undo-tree-id818 . -3) (undo-tree-id819 . -3) (undo-tree-id820 . -3) (undo-tree-id821 . -3) (undo-tree-id822 . -3) (undo-tree-id823 . -3) (undo-tree-id824 . -3) (undo-tree-id825 . -3) (undo-tree-id826 . -3) (undo-tree-id827 . -3) (undo-tree-id828 . -3)) nil (26268 3490 748637 164000) 0 nil])
([nil nil ((173 . 175) (170 . 173) (169 . 170) (167 . 167) (167 . 169) (165 . 167) (164 . 165) (t 26268 3490 802829 94000)) nil (26268 4614 41990 218000) 0 nil])
([nil nil ((#("	" 0 1 (ws-butler-chg chg fontified t)) . -176) (undo-tree-id140 . -1) 177 (175 . 177) 173) nil (26268 4614 41988 986000) 0 nil])
([nil nil ((175 . 176)) nil (26268 4614 41987 603000) 0 nil])
([nil nil ((183 . 186) (180 . 183) (179 . 180) (177 . 179)) nil (26268 4614 41986 872000) 0 nil])
([nil nil ((#("  printf();
  scanddk
" 0 2 (ws-butler-chg chg fontified t) 2 3 (ws-butler-chg chg fontified t) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t ws-butler-chg chg) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t ws-butler-chg chg) 10 11 (fontified t ws-butler-chg chg) 11 12 (ws-butler-chg chg fontified t) 12 14 (ws-butler-chg chg fontified t) 14 15 (face font-lock-type-face ws-butler-chg chg fontified t) 15 16 (face font-lock-type-face fontified t ws-butler-chg chg) 16 17 (face font-lock-type-face fontified t ws-butler-chg chg) 17 18 (face font-lock-type-face fontified t ws-butler-chg chg) 18 19 (face font-lock-type-face fontified t ws-butler-chg chg) 19 20 (face font-lock-type-face fontified t ws-butler-chg chg) 20 21 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg) 21 22 (fontified t ws-butler-chg delete)) . 165) (undo-tree-id94 . -4) (undo-tree-id95 . 1) (undo-tree-id96 . -20) (undo-tree-id97 . -20) (undo-tree-id98 . 1) (undo-tree-id99 . -20) (undo-tree-id100 . -20) (undo-tree-id101 . -20) (undo-tree-id102 . -20) (undo-tree-id103 . -20) (undo-tree-id104 . -20) (undo-tree-id105 . -20) (undo-tree-id106 . -20) (undo-tree-id107 . -20) (undo-tree-id108 . -20) (undo-tree-id109 . -20) (undo-tree-id110 . -12) (undo-tree-id111 . -20) (undo-tree-id112 . -20) (undo-tree-id113 . -20) (undo-tree-id114 . -20) (undo-tree-id115 . -20) (undo-tree-id116 . -20) (undo-tree-id117 . -20) (undo-tree-id118 . -20) (undo-tree-id119 . -20) (undo-tree-id120 . -20) (undo-tree-id121 . -20) (undo-tree-id122 . -20) (undo-tree-id123 . -20) (undo-tree-id124 . -20) (undo-tree-id125 . -20) (undo-tree-id126 . -20) (undo-tree-id127 . -20) (undo-tree-id128 . -20) (undo-tree-id129 . -20) (undo-tree-id130 . -20) (undo-tree-id131 . -20) (undo-tree-id132 . -20) (undo-tree-id133 . -20) (undo-tree-id134 . -8) (undo-tree-id135 . -20) (undo-tree-id136 . -20) (undo-tree-id137 . -20) (undo-tree-id138 . -22) (undo-tree-id139 . -21) 185) nil (26268 4614 41984 147000) 0 nil])
([nil nil ((nil ws-butler-chg delete 187 . 188) (165 . 187)) nil (26268 4614 41942 328000) 0 nil])
([nil nil ((#("  printf();
  scanddk
" 0 2 (ws-butler-chg chg fontified t) 2 3 (ws-butler-chg chg fontified t) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t ws-butler-chg chg) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t ws-butler-chg chg) 10 11 (fontified t ws-butler-chg chg) 11 12 (ws-butler-chg chg fontified t) 12 14 (ws-butler-chg chg fontified t) 14 15 (face font-lock-type-face ws-butler-chg chg fontified t) 15 16 (face font-lock-type-face fontified t ws-butler-chg chg) 16 17 (face font-lock-type-face fontified t ws-butler-chg chg) 17 18 (face font-lock-type-face fontified t ws-butler-chg chg) 18 19 (face font-lock-type-face fontified t ws-butler-chg chg) 19 20 (face font-lock-type-face fontified t ws-butler-chg chg) 20 21 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg) 21 22 (fontified t ws-butler-chg delete)) . 165) (undo-tree-id0 . -4) (undo-tree-id1 . 1) (undo-tree-id2 . -20) (undo-tree-id3 . 1) (undo-tree-id4 . -20) (undo-tree-id5 . -20) (undo-tree-id6 . -20) (undo-tree-id7 . -20) (undo-tree-id8 . -20) (undo-tree-id9 . -20) (undo-tree-id10 . -20) (undo-tree-id11 . -20) (undo-tree-id12 . -20) (undo-tree-id13 . -20) (undo-tree-id14 . -20) (undo-tree-id15 . -20) (undo-tree-id16 . -20) (undo-tree-id17 . -20) (undo-tree-id18 . -20) (undo-tree-id19 . -20) (undo-tree-id20 . -20) (undo-tree-id21 . -20) (undo-tree-id22 . -20) (undo-tree-id23 . -20) (undo-tree-id24 . -20) (undo-tree-id25 . -20) (undo-tree-id26 . -20) (undo-tree-id27 . -20) (undo-tree-id28 . -20) (undo-tree-id29 . -20) (undo-tree-id30 . -20) (undo-tree-id31 . -20) (undo-tree-id32 . -20) (undo-tree-id33 . -20) (undo-tree-id34 . -20) (undo-tree-id35 . -20) (undo-tree-id36 . -20) (undo-tree-id37 . -20) (undo-tree-id38 . -20) (undo-tree-id39 . -21) (undo-tree-id40 . -12) (undo-tree-id41 . -20) (undo-tree-id42 . -20) (undo-tree-id43 . -20) (undo-tree-id44 . -20) (undo-tree-id45 . -20) (undo-tree-id46 . -20) (undo-tree-id47 . -20) (undo-tree-id48 . -20) (undo-tree-id49 . -20) (undo-tree-id50 . -20) (undo-tree-id51 . -20) (undo-tree-id52 . -20) (undo-tree-id53 . -20) (undo-tree-id54 . -20) (undo-tree-id55 . -20) (undo-tree-id56 . -20) (undo-tree-id57 . -20) (undo-tree-id58 . -20) (undo-tree-id59 . -20) (undo-tree-id60 . -20) (undo-tree-id61 . -20) (undo-tree-id62 . -14) (undo-tree-id63 . -20) (undo-tree-id64 . -20) (undo-tree-id65 . -20) (undo-tree-id66 . -20) (undo-tree-id67 . -20) (undo-tree-id68 . -20) (undo-tree-id69 . -20) (undo-tree-id70 . -20) (undo-tree-id71 . -20) (undo-tree-id72 . -20) (undo-tree-id73 . -20) (undo-tree-id74 . -20) (undo-tree-id75 . -20) (undo-tree-id76 . -20) (undo-tree-id77 . -20) (undo-tree-id78 . -20) (undo-tree-id79 . -20) (undo-tree-id80 . -20) (undo-tree-id81 . -20) (undo-tree-id82 . -20) (undo-tree-id83 . -20) (undo-tree-id84 . -20) (undo-tree-id85 . -20) (undo-tree-id86 . -20) (undo-tree-id87 . -20) (undo-tree-id88 . -20) (undo-tree-id89 . -8) (undo-tree-id90 . -20) (undo-tree-id91 . -20) (undo-tree-id92 . -20) (undo-tree-id93 . -22) 185) nil (26268 4614 41937 640000) 0 nil])
([nil nil ((167 . 167) (167 . 171) (#("p" 0 1 (face font-lock-type-face c-type c-decl-id-start ws-butler-chg chg fontified t)) . -167) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("r" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . -168) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (#("i" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t ws-butler-chg chg)) . -169) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) 170 (167 . 167) (167 . 170) (164 . 167) (t 26268 4614 97259 654000) 164) nil (26268 4833 404225 642000) 0 nil])
([nil current ((#("  scan
" 0 2 (ws-butler-chg chg fontified t) 2 3 (face font-lock-type-face ws-butler-chg chg fontified t) 3 4 (face font-lock-type-face ws-butler-chg chg fontified t) 4 5 (face font-lock-type-face ws-butler-chg chg fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start ws-butler-chg chg fontified t) 6 7 (ws-butler-chg delete fontified t)) . 165) (undo-tree-id0 . -5) (undo-tree-id1 . -2) (undo-tree-id2 . 1) (undo-tree-id3 . -2) (undo-tree-id4 . 1) (undo-tree-id5 . -5) (undo-tree-id6 . -5) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5) (undo-tree-id10 . -5) (undo-tree-id11 . -5) (undo-tree-id12 . -5) (undo-tree-id13 . -5) (undo-tree-id14 . -5) (undo-tree-id15 . -5) (undo-tree-id16 . -5) (undo-tree-id17 . -5) (undo-tree-id18 . -5) (undo-tree-id19 . -5) (undo-tree-id20 . -5) (undo-tree-id21 . -5) (undo-tree-id22 . -5) (undo-tree-id23 . -5) (undo-tree-id24 . -5) (undo-tree-id25 . -5) (undo-tree-id26 . -5) (undo-tree-id27 . -5) (undo-tree-id28 . -5) (undo-tree-id29 . -5) (undo-tree-id30 . -5) (undo-tree-id31 . -5) (undo-tree-id32 . -5) (undo-tree-id33 . -5) (undo-tree-id34 . -5) (undo-tree-id35 . -5) (undo-tree-id36 . -5) (undo-tree-id37 . -5) (undo-tree-id38 . -5) (undo-tree-id39 . -5) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -5) (undo-tree-id44 . -5) (undo-tree-id45 . -5) (undo-tree-id46 . -5) (undo-tree-id47 . -5) (undo-tree-id48 . -5) (undo-tree-id49 . -5) (undo-tree-id50 . -5) (undo-tree-id51 . -5) (undo-tree-id52 . -5) (undo-tree-id53 . -5) (undo-tree-id54 . -5) (undo-tree-id55 . -5) (undo-tree-id56 . -5) (undo-tree-id57 . -5) (undo-tree-id58 . -5) (undo-tree-id59 . -5) (undo-tree-id60 . -5) (undo-tree-id61 . -5) (undo-tree-id62 . -5) (undo-tree-id63 . -5) (undo-tree-id64 . -5) (undo-tree-id65 . -5) (undo-tree-id66 . -5) (undo-tree-id67 . -5) (undo-tree-id68 . -5) (undo-tree-id69 . -5) (undo-tree-id70 . -5) (undo-tree-id71 . -5) (undo-tree-id72 . -5) (undo-tree-id73 . -5) (undo-tree-id74 . -5) (undo-tree-id75 . -5) (undo-tree-id76 . -5) (undo-tree-id77 . -5) (undo-tree-id78 . -5) (undo-tree-id79 . -5) (undo-tree-id80 . -5) (undo-tree-id81 . -5) (undo-tree-id82 . -5) (undo-tree-id83 . -5) (undo-tree-id84 . -5) (undo-tree-id85 . -5) (undo-tree-id86 . -5) (undo-tree-id87 . -5) (undo-tree-id88 . -5) (undo-tree-id89 . -5) (undo-tree-id90 . -5) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -5) (undo-tree-id94 . -5) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -5) (undo-tree-id98 . -5) (undo-tree-id99 . -5) (undo-tree-id100 . -5) (undo-tree-id101 . -5) (undo-tree-id102 . -5) (undo-tree-id103 . -5) (undo-tree-id104 . -5) (undo-tree-id105 . -5) (undo-tree-id106 . -5) (undo-tree-id107 . -5) (undo-tree-id108 . -5) (undo-tree-id109 . -5) (undo-tree-id110 . -5) (undo-tree-id111 . -5) (undo-tree-id112 . -5) (undo-tree-id113 . -5) (undo-tree-id114 . -5) (undo-tree-id115 . -5) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5) (undo-tree-id126 . -5) (undo-tree-id127 . -5) (undo-tree-id128 . -5) (undo-tree-id129 . -5) (undo-tree-id130 . -5) (undo-tree-id131 . -5) (undo-tree-id132 . -5) (undo-tree-id133 . -5) (undo-tree-id134 . -5) (undo-tree-id135 . -5) (undo-tree-id136 . -5) (undo-tree-id137 . -5) (undo-tree-id138 . -5) (undo-tree-id139 . -5) (undo-tree-id140 . -5) (undo-tree-id141 . -5) (undo-tree-id142 . -5) (undo-tree-id143 . -5) (undo-tree-id144 . -5) (undo-tree-id145 . -5) (undo-tree-id146 . -5) (undo-tree-id147 . -5) (undo-tree-id148 . -5) (undo-tree-id149 . -5) (undo-tree-id150 . -5) (undo-tree-id151 . -5) (undo-tree-id152 . -5) (undo-tree-id153 . -5) (undo-tree-id154 . -5) (undo-tree-id155 . -5) (undo-tree-id156 . -5) (undo-tree-id157 . -5) (undo-tree-id158 . -5) (undo-tree-id159 . -5) (undo-tree-id160 . -5) (undo-tree-id161 . -5) (undo-tree-id162 . -5) (undo-tree-id163 . -5) (undo-tree-id164 . -5) (undo-tree-id165 . -5) (undo-tree-id166 . -5) (undo-tree-id167 . -5) (undo-tree-id168 . -5) (undo-tree-id169 . -5) (undo-tree-id170 . -5) (undo-tree-id171 . -5) (undo-tree-id172 . -5) (undo-tree-id173 . -5) (undo-tree-id174 . -5) (undo-tree-id175 . -5) (undo-tree-id176 . -5) (undo-tree-id177 . -5) (undo-tree-id178 . -5) (undo-tree-id179 . -5) (undo-tree-id180 . -5) (undo-tree-id181 . -5) (undo-tree-id182 . -5) (undo-tree-id183 . -5) (undo-tree-id184 . -5) (undo-tree-id185 . -5) (undo-tree-id186 . -5) (undo-tree-id187 . -5) (undo-tree-id188 . -5) (undo-tree-id189 . -5) (undo-tree-id190 . -5) (undo-tree-id191 . -5) (undo-tree-id192 . -5) (undo-tree-id193 . -5) (undo-tree-id194 . -5) (undo-tree-id195 . -5) (undo-tree-id196 . -5) (undo-tree-id197 . -5) (undo-tree-id198 . -5) (undo-tree-id199 . -5) (undo-tree-id200 . -5) (undo-tree-id201 . -5) (undo-tree-id202 . -5) (undo-tree-id203 . -5) (undo-tree-id204 . -5) (undo-tree-id205 . -5) (undo-tree-id206 . -5) (undo-tree-id207 . -5) (undo-tree-id208 . -5) (undo-tree-id209 . -5) (undo-tree-id210 . -5) (undo-tree-id211 . -5) (undo-tree-id212 . -5) (undo-tree-id213 . -5) (undo-tree-id214 . -5) (undo-tree-id215 . -5) (undo-tree-id216 . -5) (undo-tree-id217 . -5) (undo-tree-id218 . -5) (undo-tree-id219 . -5) (undo-tree-id220 . -5) (undo-tree-id221 . -5) (undo-tree-id222 . -5) (undo-tree-id223 . -5) (undo-tree-id224 . -5) (undo-tree-id225 . -7) (undo-tree-id226 . -6) 170) nil (26268 4833 404210 303000) 0 nil])
nil
