(undo-tree-save-format-version . 1)
"0928fbcae097bc97147f7f414ff5ce1853224722"
[nil nil nil nil (26267 53786 157667 629000) 0 nil]
([nil nil ((#("Title" 0 5 (face org-meta-line font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified nil)) . 10) (undo-tree-id161 . -3) (undo-tree-id162 . -5) (undo-tree-id163 . -5) (undo-tree-id164 . -5) (undo-tree-id165 . -5) (undo-tree-id166 . -5) (undo-tree-id167 . -5) (undo-tree-id168 . -5) (undo-tree-id169 . -5) (undo-tree-id170 . -5) (undo-tree-id171 . -5) (undo-tree-id172 . -5) (undo-tree-id173 . -5) (undo-tree-id174 . -5) (undo-tree-id175 . -5) (undo-tree-id176 . -5) (undo-tree-id177 . -5) (undo-tree-id178 . -5) (undo-tree-id179 . -5) (undo-tree-id180 . -5) (undo-tree-id181 . -5) (undo-tree-id182 . -5) (undo-tree-id183 . -5) (undo-tree-id184 . -5) (undo-tree-id185 . -5) (undo-tree-id186 . -5) (3 . 10) 8 (6 . 8) (3 . 3) (3 . 6) (1 . 3) (t . -1)) nil (26267 53786 157665 385000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified nil)) . 9) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (10 . 11)) nil (26267 53786 157647 631000) 0 nil])
([nil nil ((#("e" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -25) (undo-tree-id25 . -1) 26 (33 . 35) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -33) (undo-tree-id26 . -1) (#("w" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -34) (undo-tree-id27 . -1) 35 (39 . 40) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -39) (undo-tree-id28 . -1) 40 (43 . 44) (#("c" 0 1 (face org-document-title ws-butler-chg delete wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . 43) (42 . 43) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -42) (undo-tree-id29 . -1) 43 (#("Welc" 0 4 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 56) (undo-tree-id30 . -2) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (10 . 56) 14 (12 . 14) (9 . 9) (9 . 12) (t 26267 53786 172826 791000)) nil (26267 54036 798639 543000) 0 nil])
([nil nil ((#(" We" 0 1 (ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 1 3 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 9) (undo-tree-id12 . -1) (undo-tree-id13 . -3) (undo-tree-id14 . 2) (undo-tree-id15 . -3) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("lc" 0 2 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 12) (undo-tree-id19 . -2) (#("welcome_to_the_exciting_world_of_cybersecurity" 0 15 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 15 16 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 16 17 (face org-document-title wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 17 23 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 23 24 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 24 25 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 25 26 (face org-document-title wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 26 29 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 29 30 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 30 31 (face org-document-title wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 31 32 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 32 33 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 33 34 (face org-document-title wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 34 35 (face org-document-title wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 35 46 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 10) (undo-tree-id20 . -14) (undo-tree-id21 . 30) (undo-tree-id22 . -14) (undo-tree-id23 . -14) (undo-tree-id24 . -14) (nil ws-butler-chg delete 60 . 61) (56 . 60) (nil ws-butler-chg delete 43 . 44) (42 . 43) (#(" " 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 42) (nil ws-butler-chg delete 44 . 45) (43 . 44) (#("C" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 43) (nil ws-butler-chg delete 40 . 41) (39 . 40) (#(" " 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 39) (34 . 35) (nil ws-butler-chg delete 34 . 35) (33 . 34) (#(" W" 0 2 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 33) (nil ws-butler-chg delete 26 . 27) (25 . 26)) nil (26267 54036 798631 358000) 0 nil])
([nil nil ((10 . 11) (#("w" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -10) (undo-tree-id6 . -1) 11 (17 . 18) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -17) (undo-tree-id7 . -1) 18 (20 . 21) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -20) (undo-tree-id8 . -1) 21 (24 . 25) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -24) (undo-tree-id9 . -1) 25 (33 . 34) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -33) (undo-tree-id10 . -1) 34 (39 . 40) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . 39) (42 . 43) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -42) (undo-tree-id11 . -1) 43 (13 . 56) (9 . 9) (9 . 13) (t 26267 53786 172826 791000)) nil (26267 54036 798621 320000) 0 nil])
([nil nil ((84 . 85) (72 . 84) (65 . 72) (61 . 65) (60 . 61) (57 . 57) (57 . 60) (#("a" 0 1 (font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified t)) . -57) (undo-tree-id3 . -1) (#("u" 0 1 (font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified t)) . -58) (undo-tree-id4 . -1) 59 (57 . 59) (#("j" 0 1 (font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified t)) . -57) (undo-tree-id5 . -1) 58 (57 . 58) (56 . 57) 10) nil (26267 54036 798613 575000) 0 nil])
([nil nil ((#("2024" 0 4 (face org-document-info font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified nil)) . 109) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (93 . 109) 97 (93 . 93) (93 . 97) (91 . 93) (89 . 91) (85 . 85) (85 . 89) (#("+" 0 1 (font-lock-fontified t ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix "" fontified t)) . -85) (undo-tree-id2 . -1) 86 (85 . 86)) nil (26267 54036 798605 230000) 0 nil])
([nil nil ((110 . 111) (nil fontified t 109 . 110) (nil font-lock-fontified t 109 . 110) (nil line-prefix "" 109 . 110) (nil wrap-prefix "" 109 . 110) (nil ws-butler-chg chg 109 . 110) (nil face org-document-info 109 . 110) (109 . 110) 108) nil (26267 54036 798569 144000) 0 nil])
([nil nil ((#("

" 0 1 (font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified t) 1 2 (face org-document-info ws-butler-chg delete wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . 110) (112 . 112)) nil (26267 54036 798553 525000) 0 nil])
([nil nil ((110 . 111) (t 26267 54036 816003 674000)) nil (26267 54043 669106 983000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg wrap-prefix "" line-prefix "" fontified t)) . -110) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) 111 (t 26267 54036 816003 674000)) nil (26267 54043 669101 92000) 0 nil])
([nil nil ((142 . 143) (134 . 142) (132 . 134) (131 . 132) (124 . 124) (124 . 131) (121 . 121) (121 . 124) (118 . 118) (118 . 121) (116 . 116) (116 . 118) (111 . 111) (111 . 116) (110 . 111) (109 . 110) (t 26267 54043 682440 90000) 85) nil (26267 61290 694989 970000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t fontified t)) . 143) (144 . 144)) nil (26267 61290 694983 207000) 0 nil])
([nil nil ((161 . 162) (160 . 161) (159 . 160) (#(" " 0 1 (ws-butler-chg chg font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -159) (undo-tree-id15 . -1) 160 (156 . 160) (148 . 156) (145 . 148) (143 . 143) (143 . 145) (t 26267 61290 709931 348000)) nil (26267 61589 765310 735000) 0 nil])
([nil nil ((143 . 146)) nil (26267 61589 765306 977000) 0 nil])
([nil nil ((165 . 166)) nil (26267 61589 765306 507000) 0 nil])
([nil nil ((nil rear-nonsticky nil 351 . 352) (nil fontified nil 306 . 352) (nil fontified nil 284 . 306) (nil fontified nil 251 . 284) (nil fontified nil 219 . 251) (nil fontified nil 179 . 219) (nil fontified nil 166 . 179) (166 . 352) 165) nil (26267 61589 765305 865000) 0 nil])
([nil nil ((178 . 179) (#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -178) (undo-tree-id14 . -1) 179) nil (26267 61589 765304 603000) 0 nil])
([nil nil ((218 . 219) (#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -218) (undo-tree-id13 . -1) 219) nil (26267 61589 765303 341000) 0 nil])
([nil nil ((250 . 251) (#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -250) (undo-tree-id12 . -1) 251) nil (26267 61589 765302 38000) 0 nil])
([nil nil ((283 . 284) (#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -283) (undo-tree-id11 . -1) 284) nil (26267 61589 765300 806000) 0 nil])
([nil nil ((305 . 306) (#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -305) (undo-tree-id10 . -1) 306) nil (26267 61589 765299 503000) 0 nil])
([nil nil ((142 . 143) 141) nil (26267 61589 765298 141000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . 142) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1)) nil (26267 61589 765296 878000) 0 nil])
([nil nil ((142 . 143) 141) nil (26267 61589 765294 203000) 0 nil])
([nil nil ((#("securit" 0 7 (face org-level-2 ws-butler-chg chg font-lock-fontified t wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified nil)) . 170) (undo-tree-id5 . -7) (undo-tree-id6 . -7) (162 . 170) 169 (165 . 169) (162 . 162) (162 . 165) (160 . 163)) nil (26267 61589 765292 751000) 0 nil])
([nil nil ((162 . 163) (#("S" 0 1 (face org-level-2 ws-butler-chg chg font-lock-fontified t wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . 162)) nil (26267 61589 765289 865000) 0 nil])
([nil nil ((178 . 179) (#("t" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 178)) nil (26267 61589 765288 603000) 0 nil])
([nil nil ((427 . 433) (423 . 427) (421 . 423) (418 . 418) (418 . 421) (415 . 418) (414 . 415) (412 . 414) (411 . 412) (391 . 391) (391 . 411) (382 . 391) (381 . 382) (376 . 381) (374 . 376) (372 . 372) (372 . 374) (370 . 370) (370 . 372) (368 . 368) (368 . 370) (#("A" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -368) (undo-tree-id0 . -1) (#("T" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -369) (undo-tree-id1 . -1) (#("h" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -370) (undo-tree-id2 . -1) 371 (370 . 370) (370 . 371) (367 . 367) (367 . 370) (365 . 367) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -365) (undo-tree-id3 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -366) (undo-tree-id4 . -1) 367 (364 . 367) 178) nil (26267 61589 765285 367000) 0 nil])
([nil nil ((#(" " 0 1 (rear-nonsticky t fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 363) (433 . 434)) nil (26267 61589 765254 598000) 0 nil])
([nil nil ((435 . 438) (432 . 435) (t 26267 61589 779480 134000) 431) nil (26267 61980 110709 420000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -433) (undo-tree-id75 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -434) (undo-tree-id76 . -1) 435) nil (26267 61980 110708 448000) 0 nil])
([nil nil ((456 . 457) (452 . 456) (450 . 450) (450 . 452) (#("c" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -450) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("u" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -451) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("i" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -452) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("r" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -453) (undo-tree-id71 . -1) (#("t" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -454) (undo-tree-id72 . -1) 455 (451 . 455) (444 . 444) (444 . 451) (443 . 443) (443 . 444) (442 . 442) (442 . 443) (439 . 439) (439 . 442) (#("f" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -439) (undo-tree-id73 . -1) 440 (439 . 439) (439 . 440) (438 . 438) (438 . 439) (436 . 436) (436 . 438) (#(" " 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -436) (undo-tree-id74 . -1) 437 (436 . 437)) nil (26267 61980 110705 282000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -364) (undo-tree-id64 . -2) 366 (363 . 366) 176) nil (26267 61980 110692 97000) 0 nil])
([nil nil ((436 . 437) (433 . 436) 382) nil (26267 61980 110690 695000) 0 nil])
([nil nil ((#("
  " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 1 3 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . 433) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (#("j" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 436)) nil (26267 61980 110689 813000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -434) (undo-tree-id60 . -2) 436 (433 . 436) 382) nil (26267 61980 110687 669000) 0 nil])
([nil nil ((527 . 528) (#("C" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 527) (#("compli" 0 6 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . 537) (undo-tree-id54 . -6) (undo-tree-id55 . -6) (527 . 537) 533 (529 . 533) (520 . 520) (520 . 529) (518 . 518) (518 . 520) (#("f" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -518) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("u" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -519) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 520 (519 . 520) (518 . 518) (518 . 519) (517 . 517) (517 . 518) (513 . 517) (509 . 509) (509 . 513) (508 . 509) (507 . 508) (504 . 507) (502 . 504) (498 . 498) (498 . 502) (496 . 498) (486 . 486) (486 . 496) (483 . 486) (480 . 483) (468 . 468) (468 . 480) (466 . 468) (464 . 466) (459 . 459) (459 . 464) (458 . 459) 435) nil (26267 61980 110685 4000) 0 nil])
([nil nil ((594 . 595) (599 . 604) (#("n" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -599) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("c" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -600) (undo-tree-id37 . -1) (#("e" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -601) (undo-tree-id38 . -1) 602 (597 . 602) (590 . 590) (590 . 597) (588 . 588) (588 . 590) (#("r" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -588) (undo-tree-id39 . -1) 589 (586 . 589) (585 . 587) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 585) (584 . 585) (578 . 584) (575 . 578) (571 . 571) (571 . 575) (#("s" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -566) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 567 (570 . 573) (#("e" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -570) (undo-tree-id42 . -1) (#("s" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -571) (undo-tree-id43 . -1) (#("s" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -572) (undo-tree-id44 . -1) 573 (566 . 573) (564 . 564) (564 . 566) (#("u" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -564) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("i" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -565) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("s" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -566) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("s" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -567) (undo-tree-id51 . -1) 568 (566 . 568) (561 . 561) (561 . 566) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -561) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 562 (556 . 562) (555 . 555) (555 . 556) (549 . 555) (545 . 549) (539 . 539) (539 . 545) (538 . 539) (537 . 538)) nil (26267 61980 110673 222000) 0 nil])
([nil nil ((617 . 630) (614 . 617) (613 . 614) (611 . 611) (611 . 613) (607 . 607) (607 . 611) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -607) (undo-tree-id33 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -608) (undo-tree-id34 . -1) 609 (606 . 609) 594) nil (26267 61980 110657 843000) 0 nil])
([nil nil ((650 . 651) (#("S" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -650) (undo-tree-id29 . -1) 651 (643 . 651) (638 . 638) (638 . 643) (636 . 636) (636 . 638) (631 . 631) (631 . 636) (630 . 631) (#("
" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -630) (undo-tree-id30 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -631) (undo-tree-id31 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -632) (undo-tree-id32 . -1) 633 (630 . 633) 629) nil (26267 61980 110654 56000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -631) (undo-tree-id28 . -2) 633 (630 . 633) 626) nil (26267 61980 110649 197000) 0 nil])
([nil nil ((653 . 655)) nil (26267 61980 110647 985000) 0 nil])
([nil nil ((nil rear-nonsticky nil 795 . 796) (nil fontified nil 757 . 796) (nil fontified nil 724 . 757) (nil fontified nil 687 . 724) (nil fontified nil 655 . 687) (655 . 796) 654) nil (26267 61980 110646 983000) 0 nil])
([nil nil ((#("," 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 685)) nil (26267 61980 110645 400000) 0 nil])
([nil nil ((685 . 686)) nil (26267 61980 110644 969000) 0 nil])
([nil nil ((687 . 689)) nil (26267 61980 110644 519000) 0 nil])
([nil nil ((726 . 728)) nil (26267 61980 110644 48000) 0 nil])
([nil nil ((#("," 0 1 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 768)) nil (26267 61980 110643 467000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -770) (undo-tree-id27 . -1) 771 (769 . 771) (768 . 769)) nil (26267 61980 110642 715000) 0 nil])
([nil nil ((760 . 761) (#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -760) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 761) nil (26267 61980 110640 892000) 0 nil])
([nil nil ((#("SOC" 0 3 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 757) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) 759) nil (26267 61980 110637 175000) 0 nil])
([nil nil ((757 . 759)) nil (26267 61980 110625 383000) 0 nil])
([nil nil ((nil rear-nonsticky nil 760 . 761) (nil fontified nil 758 . 761) (758 . 761) 757) nil (26267 61980 110624 471000) 0 nil])
([nil nil ((770 . 771)) nil (26267 61980 110623 379000) 0 nil])
([nil nil ((#("," 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 724)) nil (26267 61980 110622 327000) 0 nil])
([nil nil ((724 . 725)) nil (26267 61980 110621 115000) 0 nil])
([nil nil ((#(" " 0 1 (rear-nonsticky t fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 802) (#(" " 0 1 (ws-butler-chg delete wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 605)) nil (26267 61980 110616 787000) 0 nil])
([nil nil ((#("t" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -807) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (#("a" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -808) (undo-tree-id326 . -1) (#("s" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -809) (undo-tree-id327 . -1) (#("k" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -810) (undo-tree-id328 . -1) 811 (810 . 810) (810 . 811) (807 . 807) (807 . 810) (#("T" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -807) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (#("O" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -808) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("D" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -809) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (#("O" 0 1 (face (org-todo org-level-2) ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -810) (undo-tree-id335 . -1) (undo-tree-id336 . -1) 811 (807 . 811) (#("todo" 0 4 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -807) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) 811 (807 . 807) (807 . 811) (#("d" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -807) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#("f" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -808) (undo-tree-id344 . -1) (#("k" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -809) (undo-tree-id345 . -1) (#("s" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -810) (undo-tree-id346 . -1) (#("f" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -811) (undo-tree-id347 . -1) 812 (809 . 809) (809 . 812) (804 . 804) (804 . 809) (803 . 804) (#("
" 0 1 (ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -803) (undo-tree-id348 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -804) (undo-tree-id349 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -805) (undo-tree-id350 . -1) 806 (803 . 806) (t 26267 61980 133677 917000) 803) nil (26268 37464 716597 21000) 0 nil])
([nil nil ((#("
** " 0 1 (ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 1 2 (composition (1 1 [32 8228]) face org-superstar-leading ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 2 3 (composition (2 1 [9675]) face (org-superstar-header-bullet org-level-2) ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 3 4 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . 803) (undo-tree-id317 . -4) (undo-tree-id318 . -4) (undo-tree-id319 . -4) (undo-tree-id320 . -3) (undo-tree-id321 . -1) (undo-tree-id322 . -3) 806) nil (26268 37464 716557 366000) 0 nil])
([nil nil ((806 . 808) (803 . 806) 803) nil (26268 37464 716551 425000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -804) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -805) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) 806) nil (26268 37464 716546 175000) 0 nil])
([nil nil ((836 . 836) (836 . 840) (#("p" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -836) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("r" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -837) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("o" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -838) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (#("f" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -839) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("e" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -840) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) 841 (839 . 841) (#("f" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -839) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#("e" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -840) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) 841 (#("ssional" 0 7 (ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified nil)) . -841) (836 . 848) (#("profe" 0 5 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -836) (undo-tree-id247 . -5) (undo-tree-id248 . -5) (undo-tree-id249 . -5) 841 (839 . 841) (835 . 835) (835 . 839) (822 . 835) (#("cybe" 0 4 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -822) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) 826 (824 . 826) (817 . 817) (817 . 824) (811 . 817) (#("ski" 0 3 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -811) (undo-tree-id253 . -2) (undo-tree-id254 . -3) (undo-tree-id255 . -3) 814 (813 . 814) (812 . 812) (812 . 813) (805 . 812) (#(" " 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -805) (undo-tree-id256 . -1) (#(" " 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -806) (undo-tree-id257 . -1) 807 (806 . 807)) nil (26268 37464 716470 313000) 0 nil])
([nil nil ((#("f" 0 1 (face org-level-1 ws-butler-chg delete wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified nil)) . 849) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (836 . 849) (#("pro" 0 3 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -836) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -3) (undo-tree-id192 . -3) (undo-tree-id193 . -3) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -3) (undo-tree-id197 . -3) (undo-tree-id198 . -3) (undo-tree-id199 . -3) (undo-tree-id200 . -3) (undo-tree-id201 . -3) (undo-tree-id202 . -3) (undo-tree-id203 . -3) (undo-tree-id204 . -3) (undo-tree-id205 . -3) (undo-tree-id206 . -3) (undo-tree-id207 . -3) (undo-tree-id208 . -3) (undo-tree-id209 . -3) (undo-tree-id210 . -3) (undo-tree-id211 . -3) (undo-tree-id212 . -3) (undo-tree-id213 . -3) (undo-tree-id214 . -3) (undo-tree-id215 . -3) (undo-tree-id216 . -3) (undo-tree-id217 . -3) (undo-tree-id218 . -3) (undo-tree-id219 . -3) (undo-tree-id220 . -3) (undo-tree-id221 . -3) (undo-tree-id222 . -3) (undo-tree-id223 . -3) (undo-tree-id224 . -3) (undo-tree-id225 . -3) 839) nil (26268 37464 716395 682000) 0 nil])
([nil nil ((849 . 850) 848) nil (26268 37464 716006 119000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1675 . 1676) (nil fontified nil 1500 . 1676) (nil fontified nil 1317 . 1500) (nil fontified nil 1316 . 1317) (nil fontified nil 1299 . 1316) (nil fontified nil 1298 . 1299) (nil fontified nil 1101 . 1298) (nil fontified nil 871 . 1101) (nil fontified nil 870 . 871) (nil fontified nil 850 . 870) (850 . 1676) (t 26268 37464 734552 410000)) nil (26268 38056 216784 270000) 0 nil])
([nil nil ((850 . 853)) nil (26268 38056 216781 375000) 0 nil])
([nil nil ((1302 . 1305)) nil (26268 38056 216780 444000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -1100) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (#("    " 0 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -874) (undo-tree-id178 . -2) (undo-tree-id179 . -2) (undo-tree-id180 . -2) (undo-tree-id181 . -2) (undo-tree-id182 . -2) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -2) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -2) (undo-tree-id199 . -2) (undo-tree-id200 . -2) (undo-tree-id201 . -2) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (undo-tree-id204 . -2) (undo-tree-id205 . -2) (undo-tree-id206 . -2) (undo-tree-id207 . -2) (undo-tree-id208 . -2) (undo-tree-id209 . -2) (undo-tree-id210 . -2) (undo-tree-id211 . -2) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (undo-tree-id214 . -2) (undo-tree-id215 . -2) (undo-tree-id216 . -2) 1301) nil (26268 38056 216775 675000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -1494) (undo-tree-id157 . 3) (#("    " 0 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -1315) 1498) nil (26268 38056 216725 638000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 873) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1)) nil (26268 38056 216721 30000) 0 nil])
([nil nil ((nil ws-butler-chg delete 874 . 875) (873 . 874)) nil (26268 38056 216681 482000) 0 nil])
([nil nil ((874 . 877)) nil (26268 38056 216680 250000) 0 nil])
([nil nil ((1103 . 1106)) nil (26268 38056 216679 448000) 0 nil])
([nil nil ((1321 . 1324)) nil (26268 38056 216678 537000) 0 nil])
([nil nil ((1503 . 1506)) nil (26268 38056 216677 685000) 0 nil])
([nil nil ((908 . 1103) (#("Security analysts need to effectively communicate complex technical information to diverse audiences, including colleagues and clients, often collaborating in teams to solve security challenges." 0 194 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 908)) nil (26268 38056 216676 753000) 0 nil])
([nil nil ((1144 . 1300) (#("Analyzing security scenarios, identifying vulnerabilities, and developing effective solutions are crucial for maintaining a secure operational environment." 0 155 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1144) (undo-tree-id119 . -155)) nil (26268 38056 216675 241000) 0 nil])
([nil nil ((#("   " 0 3 (ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -909) (undo-tree-id118 . -3) 912 (908 . 912) 874) nil (26268 38056 216672 747000) 0 nil])
([nil nil ((#("   " 0 3 (ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -1146) (undo-tree-id117 . -3) 1149 (1145 . 1149) 1105) nil (26268 38056 216670 42000) 0 nil])
([nil nil ((1104 . 1105) 910) nil (26268 38056 216667 157000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 1104)) nil (26268 38056 216665 704000) 0 nil])
([nil nil ((#("
   " 0 1 (ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 1 4 (ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . 1145) (nil ws-butler-chg delete 1149 . 1150) (1146 . 1149)) nil (26268 38056 216664 432000) 0 nil])
([nil nil ((#("
   " 0 1 (ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 1 4 (ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . 908) (nil ws-butler-chg delete 912 . 913) (909 . 912)) nil (26268 38056 216663 130000) 0 nil])
([nil nil ((909 . 911)) nil (26268 38056 216661 978000) 0 nil])
([nil nil ((1147 . 1149)) nil (26268 38056 216660 766000) 0 nil])
([nil nil ((#("-" 0 1 (face org-superstar-item composition (4 1 [8211]) ws-butler-chg chg fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1147)) nil (26268 38056 216659 854000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1147)) nil (26268 38056 216659 43000) 0 nil])
([nil nil ((#("- " 0 1 (face org-superstar-item composition (4 1 [8211]) ws-butler-chg chg fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 2 (ws-butler-chg chg fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 909) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1)) nil (26268 38056 216658 1000) 0 nil])
([nil nil ((1346 . 1505) (#("Understanding programming languages like Python and SQL allows security analysts to automate tasks, analyze data, and identify system errors more efficiently." 0 158 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1346)) nil (26268 38056 216654 435000) 0 nil])
([nil nil ((1542 . 1681) (#("These tools help security analysts monitor systems, detect threats, investigate incidents, and gather evidence for potential legal action." 0 138 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1542)) nil (26268 38056 216652 922000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1680 . 1681) (1542 . 1680) (#("
These tools help security analysts monitor systems, detect threats, investigate incidents, and gather evidence for potential legal action." 0 1 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 139 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1542) (undo-tree-id112 . -1) (undo-tree-id113 . -139)) nil (26268 38056 216650 308000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1504 . 1505) (1346 . 1504) (#("
Understanding programming languages like Python and SQL allows security analysts to automate tasks, analyze data, and identify system errors more efficiently." 0 1 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 159 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1346)) nil (26268 38056 216646 821000) 0 nil])
([nil nil ((nil ws-butler-chg delete 911 . 912) (909 . 911)) nil (26268 38056 216645 499000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1148 . 1149) (1147 . 1148)) nil (26268 38056 216644 457000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1148 . 1149) (1147 . 1148)) nil (26268 38056 216642 955000) 0 nil])
([nil nil ((#("- " 0 1 (face org-superstar-item composition (4 1 [8211]) ws-butler-chg chg fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 2 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1147)) nil (26268 38056 216641 192000) 0 nil])
([nil nil ((#("- " 0 1 (face org-superstar-item composition (4 1 [8211]) ws-butler-chg chg fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 2 (ws-butler-chg chg fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 909) (undo-tree-id111 . -1)) nil (26268 38056 216640 20000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1299 . 1300) (1144 . 1299) (#("
Analyzing security scenarios, identifying vulnerabilities, and developing effective solutions are crucial for maintaining a secure operational environment." 0 1 (fontified t wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 2 156 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1144) (undo-tree-id104 . 154) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1)) nil (26268 38056 216637 595000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1102 . 1103) (908 . 1102) (#("
Security analysts need to effectively communicate complex technical information to diverse audiences, including colleagues and clients, often collaborating in teams to solve security challenges." 0 1 (fontified t wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 2 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 2 195 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 908) (undo-tree-id93 . 194) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1)) nil (26268 38056 216628 450000) 0 nil])
([nil nil ((875 . 876) (#("." 0 1 (fontified nil ws-butler-chg delete wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 875) (874 . 875) (#("1" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 874) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) 875) nil (26268 38056 216566 702000) 0 nil])
([nil nil ((#("-" 0 1 (ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 875)) nil (26268 38056 216562 335000) 0 nil])
([nil nil ((907 . 1102) (#("Security analysts need to effectively communicate complex technical information to diverse audiences, including colleagues and clients, often collaborating in teams to solve security challenges." 0 194 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 907)) nil (26268 38056 216561 253000) 0 nil])
([nil nil ((908 . 910)) nil (26268 38056 216560 201000) 0 nil])
([nil nil ((#("-" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 908) (undo-tree-id89 . 1)) nil (26268 38056 216559 209000) 0 nil])
([nil nil ((909 . 910)) nil (26268 38056 216557 386000) 0 nil])
([nil nil ((#("2." 0 2 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1105) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) 1106) nil (26268 38056 216555 903000) 0 nil])
([nil nil ((1105 . 1106) (#("0" 0 1 (ws-butler-chg chg fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -1105) (undo-tree-id83 . -1) 1106 (1105 . 1106) (#("0" 0 1 (ws-butler-chg chg fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -1105) (undo-tree-id84 . -1) 1106 (1105 . 1106)) nil (26268 38056 216548 441000) 0 nil])
([nil nil ((1144 . 1300) (#("Analyzing security scenarios, identifying vulnerabilities, and developing effective solutions are crucial for maintaining a secure operational environment." 0 155 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1144)) nil (26268 38056 216544 444000) 0 nil])
([nil nil ((1145 . 1147)) nil (26268 38056 216543 342000) 0 nil])
([nil nil ((#("1." 0 2 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1325) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) 1326) nil (26268 38056 216541 569000) 0 nil])
([nil nil ((1325 . 1326)) nil (26268 38056 216537 291000) 0 nil])
([nil nil ((#("2." 0 2 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1506) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 1507) nil (26268 38056 216535 688000) 0 nil])
([nil nil ((1506 . 1507)) nil (26268 38056 216529 738000) 0 nil])
([nil nil ((1348 . 1350) (1347 . 1506) (#("Understanding programming languages like Python and SQL allows security analysts to automate tasks, analyze data, and identify system errors more efficiently." 0 158 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1347)) nil (26268 38056 216528 476000) 0 nil])
([nil nil ((1545 . 1547) (1544 . 1683) (#("These tools help security analysts monitor systems, detect threats, investigate incidents, and gather evidence for potential legal action." 0 138 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1544)) nil (26268 38056 216526 593000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -1509) (undo-tree-id74 . -2) 1511 (1508 . 1511) 1348) nil (26268 38056 216523 748000) 0 nil])
([nil nil ((#("
  " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 1 3 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . 1508) (nil ws-butler-chg delete 1511 . 1512) (1509 . 1511)) nil (26268 38056 216520 522000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -1509) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -2) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) 1511 (1508 . 1511) 1348) nil (26268 38056 216517 447000) 0 nil])
([nil nil ((#("
  " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 1 3 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . 1508) (undo-tree-id18 . -1) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -3) (undo-tree-id22 . -3) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -3) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (nil ws-butler-chg delete 1511 . 1512) (1509 . 1511)) nil (26268 38056 216497 662000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1540) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1344) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1142) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 906) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1)) nil (26268 38056 216450 550000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5798 . 5799) (nil fontified nil 5361 . 5799) (nil fontified nil 5360 . 5361) (nil fontified nil 4947 . 5360) (nil fontified nil 4946 . 4947) (nil fontified nil 4557 . 4946) (nil fontified nil 4556 . 4557) (nil fontified nil 4188 . 4556) (nil fontified nil 4187 . 4188) (nil fontified nil 3828 . 4187) (nil fontified nil 3827 . 3828) (nil fontified nil 3560 . 3827) (nil fontified nil 3559 . 3560) (nil fontified nil 3542 . 3559) (nil fontified nil 3541 . 3542) (nil fontified nil 3312 . 3541) (nil fontified nil 3311 . 3312) (nil fontified nil 2904 . 3311) (nil fontified nil 2903 . 2904) (nil fontified nil 2561 . 2903) (nil fontified nil 2560 . 2561) (nil fontified nil 2168 . 2560) (nil fontified nil 2167 . 2168) (nil fontified nil 1873 . 2167) (nil fontified nil 1872 . 1873) (nil fontified nil 1703 . 1872) (nil fontified nil 1702 . 1703) (nil fontified nil 1682 . 1702) (1682 . 5799) (t 26268 38056 239138 33000)) nil (26268 38626 576874 642000) 0 nil])
([nil nil ((#("** Transferable Skills

- Communication & Collaboration:
  Security analysts need to effectively communicate complex technical information to diverse audiences, including colleagues and clients, often collaborating in teams to solve security challenges.
- Analytical & Problem-Solving Skills:
  Analyzing security scenarios, identifying vulnerabilities, and developing effective solutions are crucial for maintaining a secure operational environment.

** Technical Skills

- Programming Basics:
  Understanding programming languages like Python and SQL allows security analysts to automate tasks, analyze data, and identify system errors more efficiently.
- SIEM Tools & Computer Forensics:
  These tools help security analysts monitor systems, detect threats, investigate incidents, and gather evidence for potential legal action.
" 0 1 (composition (1 1 [32 8228]) face org-superstar-leading wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 1 2 (composition (2 1 [9675]) face (org-superstar-header-bullet org-level-2) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 2 3 (face org-level-2 wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 3 22 (face org-level-2 fontified t wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent))) 22 23 (fontified t wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent))) 23 24 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 24 25 (face org-superstar-item composition (4 1 [8211]) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 25 26 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 26 27 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 27 56 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 56 57 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 57 58 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 58 59 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 59 253 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 253 254 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 254 255 (face org-superstar-item composition (4 1 [8211]) fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 255 256 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 256 257 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 257 292 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 292 293 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 293 295 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 295 450 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 450 451 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 451 452 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 452 453 (composition (1 1 [32 8228]) face org-superstar-leading fontified t wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent))) 453 454 (composition (2 1 [9675]) face (org-superstar-header-bullet org-level-2) fontified t wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent))) 454 455 (face org-level-2 fontified t wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent))) 455 471 (face org-level-2 fontified t wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent))) 471 472 (fontified t wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent))) 472 473 (fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 473 474 (face org-superstar-item composition (4 1 [8211]) fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 474 475 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 475 476 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 476 494 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 494 495 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 495 497 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 497 655 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 655 656 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 656 657 (face org-superstar-item composition (4 1 [8211]) fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 657 658 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 658 659 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 659 690 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 690 691 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 691 693 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 693 831 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 831 832 (rear-nonsticky t fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 850) (undo-tree-id260 . -831) (undo-tree-id261 . -831) (undo-tree-id262 . 177) (undo-tree-id263 . -254) (undo-tree-id264 . -254) (undo-tree-id265 . -254) (undo-tree-id266 . -254) (undo-tree-id267 . -254) (undo-tree-id268 . -254) (undo-tree-id269 . -254) (undo-tree-id270 . -254) (undo-tree-id271 . -254) (undo-tree-id272 . -254) (undo-tree-id273 . -254) (undo-tree-id274 . -254) (undo-tree-id275 . -254) (undo-tree-id276 . -254) (undo-tree-id277 . -254) (undo-tree-id278 . -24) (undo-tree-id279 . -24) (undo-tree-id280 . -24) (undo-tree-id281 . -24) (undo-tree-id282 . -24) (undo-tree-id283 . -24) (undo-tree-id284 . -24) (undo-tree-id285 . -24) (undo-tree-id286 . -24) (undo-tree-id287 . -24) (undo-tree-id288 . -24) (undo-tree-id289 . -24) (undo-tree-id290 . -24) (undo-tree-id291 . -24) (undo-tree-id292 . -24) (undo-tree-id293 . -24) (undo-tree-id294 . -24) (undo-tree-id295 . -24) (undo-tree-id296 . -24) (undo-tree-id297 . -24) (undo-tree-id298 . -831) (undo-tree-id299 . -24) (undo-tree-id300 . -24) (undo-tree-id301 . -24) (undo-tree-id302 . -24) (undo-tree-id303 . -24) (undo-tree-id304 . -24) (undo-tree-id305 . -24) (undo-tree-id306 . -24) (undo-tree-id307 . -24) (undo-tree-id308 . -24) (undo-tree-id309 . -24) (undo-tree-id310 . -24) (undo-tree-id311 . -24) (undo-tree-id312 . -24) (undo-tree-id313 . -24) (undo-tree-id314 . -24) (undo-tree-id315 . -24) (undo-tree-id316 . -254) (undo-tree-id317 . -254) (undo-tree-id318 . -254) (undo-tree-id319 . -254) (undo-tree-id320 . -254) (undo-tree-id321 . -656) (undo-tree-id322 . -23) (undo-tree-id323 . -254) (undo-tree-id324 . -254) (undo-tree-id325 . -254) (undo-tree-id326 . -56) (undo-tree-id327 . -56) (undo-tree-id328 . -254) (undo-tree-id329 . -292) (undo-tree-id330 . -56) (undo-tree-id331 . -56) (undo-tree-id332 . -690) (undo-tree-id333 . -690) (undo-tree-id334 . -494) (undo-tree-id335 . -494) (undo-tree-id336 . -56) (undo-tree-id337 . -56) (undo-tree-id338 . -292) (undo-tree-id339 . -292) (undo-tree-id340 . -292) (undo-tree-id341 . -292) (undo-tree-id342 . -56) (undo-tree-id343 . -56) (undo-tree-id344 . -292) (undo-tree-id345 . -293) (undo-tree-id346 . -495) (undo-tree-id347 . -495) (undo-tree-id348 . -655) (undo-tree-id349 . -655) (undo-tree-id350 . -23) (undo-tree-id351 . -831) 1681) nil (26268 38626 576862 671000) 0 nil])
([nil nil ((2712 . 2714) (2710 . 2712) (#("8" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2710) (undo-tree-id258 . -1) (#("8" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -2711) (undo-tree-id259 . -1) 2712 (2710 . 2712)) nil (26268 38626 576650 448000) 0 nil])
([nil nil ((#("j" 0 1 (face org-level-2 fontified t ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)))) . 2713)) nil (26268 38626 576646 681000) 0 nil])
([nil nil ((850 . 853)) nil (26268 38626 576645 860000) 0 nil])
([nil nil ((#("You have probably developed many transferable skills through life experiences; some of those skills will help you thrive as a cybersecurity professional. These include:
" 0 169 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 874) (undo-tree-id256 . -168) (undo-tree-id257 . -2) 876) nil (26268 38626 576644 698000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 874)) nil (26268 38626 576641 242000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -2297) (#("    " 0 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -1893) (#("    " 0 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -1554) (#("    " 0 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -1165) (#("    " 0 1 (fontified t ws-butler-chg delete wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -874) 2542) nil (26268 38626 576639 318000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -4329) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (#("    " 0 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -3919) (#("    " 0 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -3533) (#("    " 0 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -3168) (#("    " 0 4 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -2812) (undo-tree-id254 . -4) (undo-tree-id255 . -4) 4349) nil (26268 38626 576635 812000) 0 nil])
([nil nil ((#("There are many technical skills that will help you be successful in the cybersecurity field. You’ll learn and practice these skills as you progress through the certificate program. Some of the tools and concepts you’ll need to use and be able to understand include: 

" 0 267 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 267 268 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 2544) (undo-tree-id247 . -267) (undo-tree-id248 . -267) (undo-tree-id249 . -267) (undo-tree-id250 . -267) 2811) nil (26268 38626 576628 189000) 0 nil])
([nil nil ((874 . 876)) nil (26268 38626 576622 449000) 0 nil])
([nil nil ((1167 . 1169) (#("_" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -1167) (undo-tree-id246 . -1) 1168 (1167 . 1168)) nil (26268 38626 576620 115000) 0 nil])
([nil nil ((apply -8 1558 2535 undo--wrap-and-run-primitive-undo 1558 2535 ((2310 . 2311) nil (2309 . 2310) nil (2307 . 2308) nil (2306 . 2307) nil (1902 . 1903) nil (1901 . 1902) nil (1899 . 1900) nil (1898 . 1899))) (1559 . 1560) (1558 . 1559)) nil (26268 38626 576615 907000) 0 nil])
([nil nil ((#("- 
" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 2 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 2 3 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1898) (undo-tree-id244 . -2) (undo-tree-id245 . -1) 1899) nil (26268 38626 576613 353000) 0 nil])
([nil nil ((#("- 
" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 2 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 2 3 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 2303) (undo-tree-id241 . -2) (undo-tree-id242 . -3) (undo-tree-id243 . -1) 2304) nil (26268 38626 576609 957000) 0 nil])
([nil nil ((#("k" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -2305) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("k" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -2306) (undo-tree-id240 . -1) 2307 (2305 . 2307) (2302 . 2305) 1899) nil (26268 38626 576604 116000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -1898) (undo-tree-id236 . -2) 1900 (1897 . 1900) 1559) nil (26268 38626 576596 974000) 0 nil])
([nil nil ((891 . 1166) (#("As a cybersecurity analyst, you will need to communicate and collaborate with others. Understanding others’ questions or concerns and communicating information clearly to individuals with technical and non-technical knowledge will help you mitigate security issues quickly. " 0 274 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 891)) nil (26268 38626 576593 297000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1165 . 1166) (891 . 1165) (#("
As a cybersecurity analyst, you will need to communicate and collaborate with others. Understanding others’ questions or concerns and communicating information clearly to individuals with technical and non-technical knowledge will help you mitigate security issues quickly. " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 275 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 891) (undo-tree-id229 . -1) (undo-tree-id230 . 274) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1)) nil (26268 38626 576591 94000) 0 nil])
([nil nil ((893 . 894) (892 . 893) (891 . 1166) (#("As a cybersecurity analyst, you will need to communicate and collaborate with others. Understanding others’ questions or concerns and communicating information clearly to individuals with technical and non-technical knowledge will help you mitigate security issues quickly. " 0 274 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 891)) nil (26268 38626 576580 645000) 0 nil])
([nil nil ((892 . 894)) nil (26268 38626 576578 672000) 0 nil])
([nil nil ((#("-" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 894) (undo-tree-id228 . 1)) nil (26268 38626 576577 219000) 0 nil])
([nil nil ((895 . 896)) nil (26268 38626 576574 655000) 0 nil])
([nil nil ((896 . 897)) nil (26268 38626 576573 663000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("         " 0 4 (face org-indent) 4 9 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 896)) nil (26268 38626 576572 220000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 895) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1)) nil (26268 38626 576570 497000) 0 nil])
([nil nil ((1191 . 1194) (1190 . 1561) (#("One of your main tasks as a cybersecurity analyst will be to proactively identify and solve problems. You can do this by recognizing attack patterns, then determining the most efficient solution to minimize risk. Don't be afraid to take risks, and try new things. Also, understand that it's rare to find a perfect solution to a problem. You’ll likely need to compromise." 0 370 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1190)) nil (26268 38626 576563 205000) 0 nil])
([nil nil ((1586 . 1589) (1585 . 1906) (#("Having a heightened sense of urgency and prioritizing tasks appropriately is essential in the cybersecurity field. So, effective time management will help you minimize potential damage and risk to critical assets and data. Additionally, it will be important to prioritize tasks and stay focused on the most urgent issue." 0 320 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1585)) nil (26268 38626 576562 53000) 0 nil])
([nil nil ((1930 . 1933) (1929 . 2316) (#("This is an evolving industry, so an important transferable skill is a willingness to learn. Technology moves fast, and that's a great thing! It doesn't mean you will need to learn it all, but it does mean that you’ll need to continue to learn throughout your career. Fortunately, you will be able to apply much of what you learn in this program to your ongoing professional development." 0 258 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 258 386 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1929)) nil (26268 38626 576559 979000) 0 nil])
([nil nil ((2348 . 2351) (2347 . 2550) (#("The only way to go far is together. By having respect for each other and encouraging diverse perspectives and mutual respect, you’ll undoubtedly find multiple and better solutions to security problems. " 0 202 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 2347)) nil (26268 38626 576557 755000) 0 nil])
([nil nil ((2600 . 2602) (2599 . 2600) (#("-" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -2599) (undo-tree-id223 . -1) 2600 (2599 . 2600)) nil (26268 38626 576555 451000) 0 nil])
([nil nil ((2576 . 2578)) nil (26268 38626 576551 43000) 0 nil])
([nil nil ((2603 . 2604)) nil (26268 38626 576549 821000) 0 nil])
([nil nil ((2938 . 2940)) nil (26268 38626 576548 409000) 0 nil])
([nil nil ((3305 . 3307)) nil (26268 38626 576547 597000) 0 nil])
([nil nil ((2997 . 3000) (2996 . 3304) (#("SIEM tools collect and analyze log data, or records of events such as unusual login behavior, and support analysts’ ability to monitor critical activities in an organization. This helps cybersecurity professionals identify and analyze potential security threats, risks, and vulnerabilities more efficiently." 0 307 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 2996)) nil (26268 38626 576546 84000) 0 nil])
([nil nil ((3348 . 3351) (3347 . 3696) (#("Cybersecurity analysts use IDSs to monitor system activity and alerts for possible intrusions. It’s important to become familiar with IDSs because they’re a key tool that every organization uses to protect assets and data. For example, you might use an IDS to monitor networks for signs of malicious activity, like unauthorized access to a network." 0 214 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 214 348 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 3347)) nil (26268 38626 576544 181000) 0 nil])
([nil nil ((3730 . 3733) (3729 . 3730)) nil (26268 38626 576542 408000) 0 nil])
([nil nil ((3701 . 3703)) nil (26268 38626 576541 76000) 0 nil])
([nil nil ((4117 . 4119)) nil (26268 38626 576540 4000) 0 nil])
([nil nil ((4139 . 4142) (4138 . 4554) (#("Cybersecurity analysts need to be able to follow established policies and procedures to respond to incidents appropriately. For example, a security analyst might receive an alert about a possible malware attack, then follow the organization’s outlined procedures to start the incident response process. This could involve conducting an investigation to identify the root issue and establishing ways to remediate it." 0 414 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 414 415 (rear-nonsticky t fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 4138)) nil (26268 38626 576538 40000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -4137) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -3731) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -3348) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -2998) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -2604) 2575) nil (26268 38626 576535 155000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -2346) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -1929) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -1586) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -1192) (#(" " 0 1 (fontified t ws-butler-chg delete wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -894) (undo-tree-id221 . -1) (undo-tree-id222 . -1) 873) nil (26268 38626 576530 597000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 4113) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 4091) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 3709) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 3327) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 2978) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 2919) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 2586) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 2539) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 2335) (#("  " 0 2 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 2311) (undo-tree-id217 . -2) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1921) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1579) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1186) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 1166) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 890) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (4547 . 4548)) nil (26268 38626 576516 913000) 0 nil])
([nil nil ((#("0" 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4568) (undo-tree-id32 . -1) 4569 (4568 . 4569) (4555 . 4568) (#("cyb" 0 3 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4555) (undo-tree-id33 . -3) (undo-tree-id34 . -3) (undo-tree-id35 . -3) 4558 (4556 . 4558) (#("u" 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4556) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) 4557 (4551 . 4551) (4551 . 4557) (4541 . 4551) (#("importa" 0 7 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4541) (undo-tree-id39 . -7) (undo-tree-id40 . -7) (undo-tree-id41 . -7) 4548 (4547 . 4548) (#("a" 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4547) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 4548 (#("n" 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4548) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("t" 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4549) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 4550 (4541 . 4550) (#("impo" 0 4 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4541) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) 4545 (4543 . 4545) (4540 . 4540) (4540 . 4543) (4534 . 4534) (4534 . 4540) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -4534) (undo-tree-id51 . -1) 4535 (4532 . 4535) (t 26268 38626 613035 137000) 4532) nil (26268 47980 973021 16000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 4533)) nil (26268 47980 973006 288000) 0 nil])
([nil nil ((4567 . 4568) 4533) nil (26268 47980 972997 632000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5253 . 5254) (nil fontified nil 5118 . 5254) (nil fontified nil 4977 . 5118) (nil fontified nil 4976 . 4977) (nil fontified nil 4943 . 4976) (nil fontified nil 4942 . 4943) (nil fontified nil 4766 . 4942) (nil fontified nil 4590 . 4766) (nil fontified nil 4589 . 4590) (nil fontified nil 4568 . 4589) (4568 . 5254)) nil (26268 47980 972996 800000) 0 nil])
([nil nil ((4568 . 4570)) nil (26268 47980 972995 578000) 0 nil])
([nil nil ((4945 . 4947)) nil (26268 47980 972995 7000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -4979) (undo-tree-id31 . 2) (#("  " 0 2 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -4768) (#("  " 0 2 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -4594) 4591) nil (26268 47980 972994 95000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t ws-butler-chg chg wrap-prefix #("        " 0 4 (face org-indent) 4 8 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -5118) 5116) nil (26268 47980 972993 43000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 4591)) nil (26268 47980 972992 352000) 0 nil])
([nil nil ((4590 . 4591)) nil (26268 47980 972991 941000) 0 nil])
([nil nil ((4975 . 4976) (#("L" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -4975) (undo-tree-id30 . -1) 4976 (4975 . 4976)) nil (26268 47980 972991 240000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 4977)) nil (26268 47980 972989 637000) 0 nil])
([nil nil ((4567 . 4568) 4533) nil (26268 47980 972988 645000) 0 nil])
([nil nil ((5251 . 5253) (#("
" 0 1 (ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -5251) (undo-tree-id27 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -5252) (undo-tree-id28 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -5253) (undo-tree-id29 . -1) 5254 (5251 . 5254) 5251) nil (26268 47980 972987 563000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -5251) (undo-tree-id26 . -2) 5253 (5250 . 5253) 5117) nil (26268 47980 972984 868000) 0 nil])
([nil nil ((#("o" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -5290) (undo-tree-id8 . -1) 5291 (5286 . 5286) (5286 . 5291) (5285 . 5286) 5284 (5271 . 5284) (#("cy" 0 2 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -5271) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) 5273 (5261 . 5261) (5261 . 5273) (5256 . 5256) (5256 . 5261) (5254 . 5256) (#("E" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -5254) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("v" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -5255) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("o" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -5256) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("l" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -5257) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("o" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -5258) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 5259 (5257 . 5259) (5256 . 5256) (5256 . 5257) (#("l" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -5256) (undo-tree-id24 . -1) (#("o" 0 1 (face org-level-1 ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -5257) (undo-tree-id25 . -1) 5258 (5256 . 5258) (5253 . 5253) (5253 . 5256)) nil (26268 47980 972981 512000) 0 nil])
([nil nil ((#("k" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . 5289)) nil (26268 47980 972968 327000) 0 nil])
([nil nil ((5285 . 5286) 5254) nil (26268 47980 972967 235000) 0 nil])
([nil nil ((#(" " 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified nil)) . 5288) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#(" " 0 1 (face org-level-1 ws-butler-chg delete wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . 5284) (5290 . 5291)) nil (26268 47980 972964 490000) 0 nil])
([nil nil ((5300 . 5313) (#("cy" 0 2 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -5300) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) 5302 (5296 . 5296) (5296 . 5302) (5292 . 5292) (5292 . 5296) (5288 . 5288) (5288 . 5292) (t 26268 47980 983994 972000)) nil (26268 48824 402137 54000) 0 nil])
([nil nil ((5312 . 5314) (#("y" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . 5312) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1)) nil (26268 48824 402120 513000) 0 nil])
([nil nil ((nil ws-butler-chg delete 5313 . 5314) (5312 . 5313) (#("
y" 0 1 (ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 1 2 (ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 5312) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1)) nil (26268 48824 402077 71000) 0 nil])
([nil nil ((#("* The evolution of cybersecurity

** History of cybersecurity
" 0 1 (composition (0 1 [9673]) face (org-superstar-header-bullet org-level-1) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 1 2 (face org-level-1 wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 2 19 (face org-level-1 wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 19 32 (face org-level-1 wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 32 33 (wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 33 34 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 34 35 (composition (1 1 [32 8228]) face org-superstar-leading wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 35 36 (composition (2 1 [9675]) face (org-superstar-header-bullet org-level-2) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 36 37 (face org-level-2 wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 37 48 (face org-level-2 wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 48 60 (face org-level-2 wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 60 61 (face org-level-2 wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 61 62 (wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . 5252) (undo-tree-id200 . -62) (undo-tree-id201 . -48) (undo-tree-id202 . 1) (undo-tree-id203 . -61) (undo-tree-id204 . -62) (undo-tree-id205 . -36) (undo-tree-id206 . -34) (undo-tree-id207 . -34) (undo-tree-id208 . -34) (undo-tree-id209 . -60) (undo-tree-id210 . -60) (undo-tree-id211 . -62) (undo-tree-id212 . -62) (undo-tree-id213 . -62) (undo-tree-id214 . -62) 5314 (t 26268 48824 428987 625000)) nil (26268 49997 539924 492000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6570 . 6571) (nil fontified nil 6490 . 6571) (nil fontified nil 6489 . 6490) (nil fontified nil 6426 . 6489) (nil fontified nil 6425 . 6426) (nil fontified nil 6357 . 6425) (nil fontified nil 6356 . 6357) (nil fontified nil 6263 . 6356) (nil fontified nil 6262 . 6263) (nil fontified nil 6139 . 6262) (nil fontified nil 6138 . 6139) (nil fontified nil 6023 . 6138) (nil fontified nil 6022 . 6023) (nil fontified nil 5924 . 6022) (nil fontified nil 5923 . 5924) (nil fontified nil 5808 . 5923) (nil fontified nil 5807 . 5808) (nil fontified nil 5698 . 5807) (nil fontified nil 5697 . 5698) (nil fontified nil 5543 . 5697) (nil fontified nil 5542 . 5543) (nil fontified nil 5328 . 5542) (nil fontified nil 5327 . 5328) (nil fontified nil 5281 . 5327) (nil fontified nil 5252 . 5281) (5252 . 6571)) nil (26268 49997 539914 994000) 0 nil])
([nil nil ((5252 . 5255)) nil (26268 49997 539912 639000) 0 nil])
([nil nil ((apply -40 5331 6616 undo--wrap-and-run-primitive-undo 5331 6616 ((6534 . 6535) nil (6533 . 6534) nil (6531 . 6532) nil (6530 . 6531) nil (6466 . 6467) nil (6465 . 6466) nil (6463 . 6464) nil (6462 . 6463) nil (6393 . 6394) nil (6392 . 6393) nil (6390 . 6391) nil (6389 . 6390) nil (6295 . 6296) nil (6294 . 6295) nil (6292 . 6293) nil (6291 . 6292) nil (6167 . 6168) nil (6166 . 6167) nil (6164 . 6165) nil (6163 . 6164) nil (6047 . 6048) nil (6046 . 6047) nil (6044 . 6045) nil (6043 . 6044) nil (5944 . 5945) nil (5943 . 5944) nil (5941 . 5942) nil (5940 . 5941) nil (5824 . 5825) nil (5823 . 5824) nil (5821 . 5822) nil (5820 . 5821) nil (5710 . 5711) nil (5709 . 5710) nil (5707 . 5708) nil (5706 . 5707) nil (5551 . 5552) nil (5550 . 5551) nil (5548 . 5549) nil (5547 . 5548))) (5331 . 5333)) nil (26268 49997 539912 199000) 0 nil])
([nil nil ((#("- 
" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 1 2 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent))) 2 3 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5547) (undo-tree-id198 . -2) (undo-tree-id199 . -1) 5548) nil (26268 49997 539911 327000) 0 nil])
([nil nil ((#("-" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5703)) nil (26268 49997 539909 904000) 0 nil])
([nil nil ((#("-" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5816)) nil (26268 49997 539909 443000) 0 nil])
([nil nil ((#("-" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5935)) nil (26268 49997 539908 953000) 0 nil])
([nil nil ((#("-" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6037)) nil (26268 49997 539908 402000) 0 nil])
([nil nil ((#("-" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6156) (undo-tree-id197 . -1)) nil (26268 49997 539907 991000) 0 nil])
([nil nil ((#("-" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6283) (undo-tree-id196 . -1)) nil (26268 49997 539906 698000) 0 nil])
([nil nil ((#("-" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6380) (undo-tree-id195 . -1)) nil (26268 49997 539905 877000) 0 nil])
([nil nil ((#("-" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6452) (undo-tree-id194 . -1)) nil (26268 49997 539904 735000) 0 nil])
([nil nil ((#("-" 0 1 (face org-superstar-item composition (4 1 [8211]) fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6519) (undo-tree-id193 . -1)) nil (26268 49997 539903 482000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -5547) (undo-tree-id179 . -2) (undo-tree-id180 . -2) (undo-tree-id181 . -2) (undo-tree-id182 . -2) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -2) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) 5549 (5546 . 5549) 5331) nil (26268 49997 539901 308000) 0 nil])
([nil nil ((#(" " 0 1 (rear-nonsticky t fontified nil ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6594) (#(" " 0 1 (fontified t ws-butler-chg delete wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6511) (undo-tree-id178 . 1) (#(" " 0 1 (fontified t ws-butler-chg delete wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6445) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6372) (#(" " 0 1 (fontified t ws-butler-chg delete wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6278) (#(" " 0 1 (fontified t ws-butler-chg delete wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6152) (#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6151) (#(" " 0 1 (fontified t ws-butler-chg delete wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6035) (#(" " 0 1 (fontified t ws-butler-chg delete wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5934) (#(" " 0 1 (fontified t ws-butler-chg delete wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5816) (#(" " 0 1 (fontified t ws-butler-chg delete wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5704) (6605 . 6606)) nil (26268 49997 539887 983000) 0 nil])
([nil nil ((5362 . 5547) (#("The practice of ensuring confidentiality, integrity, and availability of information by protecting networks, devices, people, and data from unauthorized access or criminal exploitation" 0 184 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5362) (t 26268 49997 561976 651000)) nil (26268 50084 41603 131000) 0 nil])
([nil nil ((5567 . 5705) (#("The process of ensuring that assets stored in the cloud are properly configured and access to those assets is limited to authorized users" 0 137 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5567)) nil (26268 50084 41602 330000) 0 nil])
([nil nil ((5726 . 5818) (#("A current or former employee, external vendor, or trusted partner who poses a security risk" 0 91 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5726)) nil (26268 50084 41601 608000) 0 nil])
([nil nil ((5840 . 5937) (#("The practice of keeping an organization's network infrastructure secure from unauthorized access" 0 96 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5840)) nil (26268 50084 41600 857000) 0 nil])
([nil nil ((5984 . 6039) (#("Any information used to infer an individual’s identity" 0 54 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5984)) nil (26268 50084 41600 306000) 0 nil])
([nil nil ((6061 . 6157) (#("An organization’s ability to manage its defense of critical assets and data and react to change" 0 95 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6061)) nil (26268 50084 41599 414000) 0 nil])
([nil nil ((6215 . 6284) (#("A specific type of PII that falls under stricter handling guidelines" 0 68 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6215)) nil (26268 50084 41598 973000) 0 nil])
([nil nil ((6306 . 6380) (#("Skills that require knowledge of specific tools, procedures, and policies" 0 73 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6306)) nil (26268 50084 41598 462000) 0 nil])
([nil nil ((6393 . 6453) (#("Any circumstance or event that can negatively impact assets" 0 59 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6393)) nil (26268 50084 41597 581000) 0 nil])
([nil nil ((6471 . 6520) (#("Any person or group who presents a security risk" 0 48 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6471)) nil (26268 50084 41597 140000) 0 nil])
([nil nil ((6545 . 6605) (#("Skills from other areas that can apply to different careers" 0 59 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6545)) nil (26268 50084 41596 599000) 0 nil])
([nil nil ((5547 . 5548)) nil (26268 50084 41596 48000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5706 . 5707) (nil fontified nil 5706 . 5707) (5706 . 5707) 5705) nil (26268 50084 41595 266000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5820 . 5821) (nil fontified nil 5820 . 5821) (5820 . 5821) 5819) nil (26268 50084 41594 405000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5936 . 5937) (nil fontified nil 5936 . 5937) (5936 . 5937) 5935) nil (26268 50084 41593 453000) 0 nil])
([nil nil ((#("." 0 1 (rear-nonsticky nil fontified nil ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5936) (undo-tree-id215 . -1) (nil rear-nonsticky t 5936 . 5937)) nil (26268 50084 41592 341000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5940 . 5941) (nil fontified nil 5940 . 5941) (5940 . 5941) 5939) nil (26268 50084 41582 783000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6043 . 6044) (nil fontified nil 6043 . 6044) (6043 . 6044) 6042) nil (26268 50084 41581 871000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6162 . 6163) (nil fontified nil 6162 . 6163) (6162 . 6163) 6161) nil (26268 50084 41581 170000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6290 . 6291) (nil fontified nil 6290 . 6291) (6290 . 6291) 6289) nil (26268 50084 41580 398000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6387 . 6388) (nil fontified nil 6387 . 6388) (6387 . 6388) 6386) nil (26268 50084 41579 597000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6461 . 6462) (nil fontified nil 6461 . 6462) (6461 . 6462) 6460) nil (26268 50084 41578 895000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6529 . 6530) (nil fontified nil 6529 . 6530) (6529 . 6530) 6528) nil (26268 50084 41577 944000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6615 . 6616) (nil fontified nil 6615 . 6616) (6615 . 6616) 6614) nil (26268 50084 41576 441000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6544) (#(" " 0 1 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6470) (#(" " 0 1 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6392) (#(" " 0 1 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6305) (#(" " 0 1 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6214) (#(" " 0 1 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 6060) (#(" " 0 1 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5983) (#(" " 0 1 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5839) (#(" " 0 1 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5725) (#(" " 0 1 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5566) (#(" " 0 1 (fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 5361)) nil (26268 50084 41572 333000) 0 nil])
([nil nil ((5284 . 5288) (t 26268 50084 62948 804000)) nil (26268 50255 19809 886000) 0 nil])
([nil nil ((5283 . 5284) 5255) nil (26268 50255 19808 994000) 0 nil])
([nil nil ((5368 . 5370) (#("_" 0 1 (ws-butler-chg chg fontified t wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)) line-prefix #("      " 0 6 (face org-indent)))) . -5368) (undo-tree-id486 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)) line-prefix #("      " 0 6 (face org-indent)))) . -5369) (undo-tree-id487 . -1) 5370 (5367 . 5370)) nil (26268 50255 19807 541000) 0 nil])
([nil current ((#(" _ " 0 1 (ws-butler-chg chg fontified nil wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)) line-prefix #("      " 0 6 (face org-indent))) 1 2 (ws-butler-chg chg fontified nil wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)) line-prefix #("      " 0 6 (face org-indent))) 2 3 (ws-butler-chg chg fontified nil wrap-prefix #("       " 0 6 (face org-indent) 6 7 (face org-indent)) line-prefix #("      " 0 6 (face org-indent)))) . 5367) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -3) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (5369 . 5370) (nil ws-butler-chg delete 5369 . 5370) (5368 . 5369) (#("- " 0 1 (face org-superstar-item composition (4 1 [8211]) ws-butler-chg chg fontified t wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) line-prefix #("      " 0 6 (face org-indent))) 1 2 (ws-butler-chg chg fontified t wrap-prefix #("         " 0 6 (face org-indent) 6 9 (face org-indent)) line-prefix #("      " 0 6 (face org-indent)))) . 5368) (undo-tree-id351 . -1) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) (undo-tree-id358 . -2) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1)) nil (26268 50255 19796 510000) 0 nil])
nil
