(undo-tree-save-format-version . 1)
"3c12e7daac9ac51567421813ea8c93be7e5d1565"
[nil nil nil nil (26267 53786 157667 629000) 0 nil]
([nil nil ((#("Title" 0 5 (face org-meta-line font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified nil)) . 10) (undo-tree-id161 . -3) (undo-tree-id162 . -5) (undo-tree-id163 . -5) (undo-tree-id164 . -5) (undo-tree-id165 . -5) (undo-tree-id166 . -5) (undo-tree-id167 . -5) (undo-tree-id168 . -5) (undo-tree-id169 . -5) (undo-tree-id170 . -5) (undo-tree-id171 . -5) (undo-tree-id172 . -5) (undo-tree-id173 . -5) (undo-tree-id174 . -5) (undo-tree-id175 . -5) (undo-tree-id176 . -5) (undo-tree-id177 . -5) (undo-tree-id178 . -5) (undo-tree-id179 . -5) (undo-tree-id180 . -5) (undo-tree-id181 . -5) (undo-tree-id182 . -5) (undo-tree-id183 . -5) (undo-tree-id184 . -5) (undo-tree-id185 . -5) (undo-tree-id186 . -5) (3 . 10) 8 (6 . 8) (3 . 3) (3 . 6) (1 . 3) (t . -1)) nil (26267 53786 157665 385000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified nil)) . 9) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (10 . 11)) nil (26267 53786 157647 631000) 0 nil])
([nil nil ((#("e" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -25) (undo-tree-id25 . -1) 26 (33 . 35) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -33) (undo-tree-id26 . -1) (#("w" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -34) (undo-tree-id27 . -1) 35 (39 . 40) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -39) (undo-tree-id28 . -1) 40 (43 . 44) (#("c" 0 1 (face org-document-title ws-butler-chg delete wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . 43) (42 . 43) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -42) (undo-tree-id29 . -1) 43 (#("Welc" 0 4 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 56) (undo-tree-id30 . -2) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (10 . 56) 14 (12 . 14) (9 . 9) (9 . 12) (t 26267 53786 172826 791000)) nil (26267 54036 798639 543000) 0 nil])
([nil nil ((#(" We" 0 1 (ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 1 3 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 9) (undo-tree-id12 . -1) (undo-tree-id13 . -3) (undo-tree-id14 . 2) (undo-tree-id15 . -3) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("lc" 0 2 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 12) (undo-tree-id19 . -2) (#("welcome_to_the_exciting_world_of_cybersecurity" 0 15 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 15 16 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 16 17 (face org-document-title wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 17 23 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 23 24 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 24 25 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 25 26 (face org-document-title wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 26 29 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 29 30 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 30 31 (face org-document-title wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 31 32 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 32 33 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 33 34 (face org-document-title wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 34 35 (face org-document-title wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil) 35 46 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 10) (undo-tree-id20 . -14) (undo-tree-id21 . 30) (undo-tree-id22 . -14) (undo-tree-id23 . -14) (undo-tree-id24 . -14) (nil ws-butler-chg delete 60 . 61) (56 . 60) (nil ws-butler-chg delete 43 . 44) (42 . 43) (#(" " 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 42) (nil ws-butler-chg delete 44 . 45) (43 . 44) (#("C" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 43) (nil ws-butler-chg delete 40 . 41) (39 . 40) (#(" " 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 39) (34 . 35) (nil ws-butler-chg delete 34 . 35) (33 . 34) (#(" W" 0 2 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified nil)) . 33) (nil ws-butler-chg delete 26 . 27) (25 . 26)) nil (26267 54036 798631 358000) 0 nil])
([nil nil ((10 . 11) (#("w" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -10) (undo-tree-id6 . -1) 11 (17 . 18) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -17) (undo-tree-id7 . -1) 18 (20 . 21) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -20) (undo-tree-id8 . -1) 21 (24 . 25) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -24) (undo-tree-id9 . -1) 25 (33 . 34) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -33) (undo-tree-id10 . -1) 34 (39 . 40) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . 39) (42 . 43) (#("_" 0 1 (face org-document-title ws-butler-chg chg wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . -42) (undo-tree-id11 . -1) 43 (13 . 56) (9 . 9) (9 . 13) (t 26267 53786 172826 791000)) nil (26267 54036 798621 320000) 0 nil])
([nil nil ((84 . 85) (72 . 84) (65 . 72) (61 . 65) (60 . 61) (57 . 57) (57 . 60) (#("a" 0 1 (font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified t)) . -57) (undo-tree-id3 . -1) (#("u" 0 1 (font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified t)) . -58) (undo-tree-id4 . -1) 59 (57 . 59) (#("j" 0 1 (font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified t)) . -57) (undo-tree-id5 . -1) 58 (57 . 58) (56 . 57) 10) nil (26267 54036 798613 575000) 0 nil])
([nil nil ((#("2024" 0 4 (face org-document-info font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified nil)) . 109) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (93 . 109) 97 (93 . 93) (93 . 97) (91 . 93) (89 . 91) (85 . 85) (85 . 89) (#("+" 0 1 (font-lock-fontified t ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix "" fontified t)) . -85) (undo-tree-id2 . -1) 86 (85 . 86)) nil (26267 54036 798605 230000) 0 nil])
([nil nil ((110 . 111) (nil fontified t 109 . 110) (nil font-lock-fontified t 109 . 110) (nil line-prefix "" 109 . 110) (nil wrap-prefix "" 109 . 110) (nil ws-butler-chg chg 109 . 110) (nil face org-document-info 109 . 110) (109 . 110) 108) nil (26267 54036 798569 144000) 0 nil])
([nil nil ((#("

" 0 1 (font-lock-fontified t ws-butler-chg chg wrap-prefix "" line-prefix "" fontified t) 1 2 (face org-document-info ws-butler-chg delete wrap-prefix "" line-prefix "" font-lock-fontified t fontified t)) . 110) (112 . 112)) nil (26267 54036 798553 525000) 0 nil])
([nil nil ((110 . 111) (t 26267 54036 816003 674000)) nil (26267 54043 669106 983000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg wrap-prefix "" line-prefix "" fontified t)) . -110) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) 111 (t 26267 54036 816003 674000)) nil (26267 54043 669101 92000) 0 nil])
([nil nil ((142 . 143) (134 . 142) (132 . 134) (131 . 132) (124 . 124) (124 . 131) (121 . 121) (121 . 124) (118 . 118) (118 . 121) (116 . 116) (116 . 118) (111 . 111) (111 . 116) (110 . 111) (109 . 110) (t 26267 54043 682440 90000) 85) nil (26267 61290 694989 970000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t fontified t)) . 143) (144 . 144)) nil (26267 61290 694983 207000) 0 nil])
([nil nil ((161 . 162) (160 . 161) (159 . 160) (#(" " 0 1 (ws-butler-chg chg font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -159) (undo-tree-id15 . -1) 160 (156 . 160) (148 . 156) (145 . 148) (143 . 143) (143 . 145) (t 26267 61290 709931 348000)) nil (26267 61589 765310 735000) 0 nil])
([nil nil ((143 . 146)) nil (26267 61589 765306 977000) 0 nil])
([nil nil ((165 . 166)) nil (26267 61589 765306 507000) 0 nil])
([nil nil ((nil rear-nonsticky nil 351 . 352) (nil fontified nil 306 . 352) (nil fontified nil 284 . 306) (nil fontified nil 251 . 284) (nil fontified nil 219 . 251) (nil fontified nil 179 . 219) (nil fontified nil 166 . 179) (166 . 352) 165) nil (26267 61589 765305 865000) 0 nil])
([nil nil ((178 . 179) (#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -178) (undo-tree-id14 . -1) 179) nil (26267 61589 765304 603000) 0 nil])
([nil nil ((218 . 219) (#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -218) (undo-tree-id13 . -1) 219) nil (26267 61589 765303 341000) 0 nil])
([nil nil ((250 . 251) (#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -250) (undo-tree-id12 . -1) 251) nil (26267 61589 765302 38000) 0 nil])
([nil nil ((283 . 284) (#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -283) (undo-tree-id11 . -1) 284) nil (26267 61589 765300 806000) 0 nil])
([nil nil ((305 . 306) (#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -305) (undo-tree-id10 . -1) 306) nil (26267 61589 765299 503000) 0 nil])
([nil nil ((142 . 143) 141) nil (26267 61589 765298 141000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . 142) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1)) nil (26267 61589 765296 878000) 0 nil])
([nil nil ((142 . 143) 141) nil (26267 61589 765294 203000) 0 nil])
([nil nil ((#("securit" 0 7 (face org-level-2 ws-butler-chg chg font-lock-fontified t wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified nil)) . 170) (undo-tree-id5 . -7) (undo-tree-id6 . -7) (162 . 170) 169 (165 . 169) (162 . 162) (162 . 165) (160 . 163)) nil (26267 61589 765292 751000) 0 nil])
([nil nil ((162 . 163) (#("S" 0 1 (face org-level-2 ws-butler-chg chg font-lock-fontified t wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . 162)) nil (26267 61589 765289 865000) 0 nil])
([nil nil ((178 . 179) (#("t" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 178)) nil (26267 61589 765288 603000) 0 nil])
([nil nil ((427 . 433) (423 . 427) (421 . 423) (418 . 418) (418 . 421) (415 . 418) (414 . 415) (412 . 414) (411 . 412) (391 . 391) (391 . 411) (382 . 391) (381 . 382) (376 . 381) (374 . 376) (372 . 372) (372 . 374) (370 . 370) (370 . 372) (368 . 368) (368 . 370) (#("A" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -368) (undo-tree-id0 . -1) (#("T" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -369) (undo-tree-id1 . -1) (#("h" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -370) (undo-tree-id2 . -1) 371 (370 . 370) (370 . 371) (367 . 367) (367 . 370) (365 . 367) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -365) (undo-tree-id3 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -366) (undo-tree-id4 . -1) 367 (364 . 367) 178) nil (26267 61589 765285 367000) 0 nil])
([nil nil ((#(" " 0 1 (rear-nonsticky t fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 363) (433 . 434)) nil (26267 61589 765254 598000) 0 nil])
([nil nil ((435 . 438) (432 . 435) (t 26267 61589 779480 134000) 431) nil (26267 61980 110709 420000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -433) (undo-tree-id75 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -434) (undo-tree-id76 . -1) 435) nil (26267 61980 110708 448000) 0 nil])
([nil nil ((456 . 457) (452 . 456) (450 . 450) (450 . 452) (#("c" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -450) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("u" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -451) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("i" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -452) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("r" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -453) (undo-tree-id71 . -1) (#("t" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -454) (undo-tree-id72 . -1) 455 (451 . 455) (444 . 444) (444 . 451) (443 . 443) (443 . 444) (442 . 442) (442 . 443) (439 . 439) (439 . 442) (#("f" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -439) (undo-tree-id73 . -1) 440 (439 . 439) (439 . 440) (438 . 438) (438 . 439) (436 . 436) (436 . 438) (#(" " 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -436) (undo-tree-id74 . -1) 437 (436 . 437)) nil (26267 61980 110705 282000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -364) (undo-tree-id64 . -2) 366 (363 . 366) 176) nil (26267 61980 110692 97000) 0 nil])
([nil nil ((436 . 437) (433 . 436) 382) nil (26267 61980 110690 695000) 0 nil])
([nil nil ((#("
  " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 1 3 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . 433) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (#("j" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 436)) nil (26267 61980 110689 813000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -434) (undo-tree-id60 . -2) 436 (433 . 436) 382) nil (26267 61980 110687 669000) 0 nil])
([nil nil ((527 . 528) (#("C" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 527) (#("compli" 0 6 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . 537) (undo-tree-id54 . -6) (undo-tree-id55 . -6) (527 . 537) 533 (529 . 533) (520 . 520) (520 . 529) (518 . 518) (518 . 520) (#("f" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -518) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("u" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -519) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 520 (519 . 520) (518 . 518) (518 . 519) (517 . 517) (517 . 518) (513 . 517) (509 . 509) (509 . 513) (508 . 509) (507 . 508) (504 . 507) (502 . 504) (498 . 498) (498 . 502) (496 . 498) (486 . 486) (486 . 496) (483 . 486) (480 . 483) (468 . 468) (468 . 480) (466 . 468) (464 . 466) (459 . 459) (459 . 464) (458 . 459) 435) nil (26267 61980 110685 4000) 0 nil])
([nil nil ((594 . 595) (599 . 604) (#("n" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -599) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("c" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -600) (undo-tree-id37 . -1) (#("e" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -601) (undo-tree-id38 . -1) 602 (597 . 602) (590 . 590) (590 . 597) (588 . 588) (588 . 590) (#("r" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -588) (undo-tree-id39 . -1) 589 (586 . 589) (585 . 587) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 585) (584 . 585) (578 . 584) (575 . 578) (571 . 571) (571 . 575) (#("s" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -566) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 567 (570 . 573) (#("e" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -570) (undo-tree-id42 . -1) (#("s" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -571) (undo-tree-id43 . -1) (#("s" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -572) (undo-tree-id44 . -1) 573 (566 . 573) (564 . 564) (564 . 566) (#("u" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -564) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("i" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -565) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("s" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -566) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("s" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -567) (undo-tree-id51 . -1) 568 (566 . 568) (561 . 561) (561 . 566) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -561) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 562 (556 . 562) (555 . 555) (555 . 556) (549 . 555) (545 . 549) (539 . 539) (539 . 545) (538 . 539) (537 . 538)) nil (26267 61980 110673 222000) 0 nil])
([nil nil ((617 . 630) (614 . 617) (613 . 614) (611 . 611) (611 . 613) (607 . 607) (607 . 611) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -607) (undo-tree-id33 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -608) (undo-tree-id34 . -1) 609 (606 . 609) 594) nil (26267 61980 110657 843000) 0 nil])
([nil nil ((650 . 651) (#("S" 0 1 (face org-level-2 ws-butler-chg chg wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -650) (undo-tree-id29 . -1) 651 (643 . 651) (638 . 638) (638 . 643) (636 . 636) (636 . 638) (631 . 631) (631 . 636) (630 . 631) (#("
" 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -630) (undo-tree-id30 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -631) (undo-tree-id31 . -1) (#(" " 0 1 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -632) (undo-tree-id32 . -1) 633 (630 . 633) 629) nil (26267 61980 110654 56000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -631) (undo-tree-id28 . -2) 633 (630 . 633) 626) nil (26267 61980 110649 197000) 0 nil])
([nil nil ((653 . 655)) nil (26267 61980 110647 985000) 0 nil])
([nil nil ((nil rear-nonsticky nil 795 . 796) (nil fontified nil 757 . 796) (nil fontified nil 724 . 757) (nil fontified nil 687 . 724) (nil fontified nil 655 . 687) (655 . 796) 654) nil (26267 61980 110646 983000) 0 nil])
([nil nil ((#("," 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 685)) nil (26267 61980 110645 400000) 0 nil])
([nil nil ((685 . 686)) nil (26267 61980 110644 969000) 0 nil])
([nil nil ((687 . 689)) nil (26267 61980 110644 519000) 0 nil])
([nil nil ((726 . 728)) nil (26267 61980 110644 48000) 0 nil])
([nil nil ((#("," 0 1 (fontified t ws-butler-chg chg wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 768)) nil (26267 61980 110643 467000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -770) (undo-tree-id27 . -1) 771 (769 . 771) (768 . 769)) nil (26267 61980 110642 715000) 0 nil])
([nil nil ((760 . 761) (#("
" 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . -760) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 761) nil (26267 61980 110640 892000) 0 nil])
([nil nil ((#("SOC" 0 3 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 757) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) 759) nil (26267 61980 110637 175000) 0 nil])
([nil nil ((757 . 759)) nil (26267 61980 110625 383000) 0 nil])
([nil nil ((nil rear-nonsticky nil 760 . 761) (nil fontified nil 758 . 761) (758 . 761) 757) nil (26267 61980 110624 471000) 0 nil])
([nil nil ((770 . 771)) nil (26267 61980 110623 379000) 0 nil])
([nil nil ((#("," 0 1 (fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 724)) nil (26267 61980 110622 327000) 0 nil])
([nil nil ((724 . 725)) nil (26267 61980 110621 115000) 0 nil])
([nil current ((#(" " 0 1 (rear-nonsticky t fontified t ws-butler-chg chg wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)))) . 802) (#(" " 0 1 (ws-butler-chg delete wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 605)) nil (26267 61980 110616 787000) 0 nil])
nil
